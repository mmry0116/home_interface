/**
 * @typedef {{
 *  media: HTMLMediaElement,
 *  url?: string,
 *  isLive?: boolean,
 *  softDecode?: boolean,
 *  analyzeDuration?: number,
 *  maxJumpDistance?: number,
 *  maxLatency?: number,
 *  targetLatency?: number,
 *  bufferBehind?: number,
 *  retryCount?: number,
 *  retryDelay?: number,
 *  disconnectRetryCount?: number
 *  loadTimeout?: number,
 *  maxReaderInterval?: number,
 *  preloadTime?: number,
 *  defaultVodLoadSize?: number,
 *  disconnectTime?: number,
 *  fetchOptions?: RequestInit,
 *  seamlesslyReload: boolean,
*   keepStatusAfterSwitch?: boolean,
*   onlyVideo?: boolean,
*   onlyAudio?: boolean,
*   preferMMS?: boolean,
*   mseLowLatency?: boolean,
*   durationForLowLatency?: number, // s
*   preProcessUrl?: (url: string, ext?: { [propName: string]: any }) => { url: string, [propName: string]: any }
 * }} FlvOption
 */
/**
 * @param {FlvOption} opts
 * @returns {FlvOption}
 */
export function getOption(opts: FlvOption): FlvOption;
export type FlvOption = {
    media: HTMLMediaElement;
    url?: string;
    isLive?: boolean;
    softDecode?: boolean;
    analyzeDuration?: number;
    maxJumpDistance?: number;
    maxLatency?: number;
    targetLatency?: number;
    bufferBehind?: number;
    retryCount?: number;
    retryDelay?: number;
    disconnectRetryCount?: number;
    loadTimeout?: number;
    maxReaderInterval?: number;
    preloadTime?: number;
    defaultVodLoadSize?: number;
    disconnectTime?: number;
    fetchOptions?: RequestInit;
    seamlesslyReload: boolean;
    keepStatusAfterSwitch?: boolean;
    onlyVideo?: boolean;
    onlyAudio?: boolean;
    preferMMS?: boolean;
    mseLowLatency?: boolean;
    durationForLowLatency?: number;
    preProcessUrl?: (url: string, ext?: {
        [propName: string]: any;
    }) => {
        [propName: string]: any;
        url: string;
    };
};
