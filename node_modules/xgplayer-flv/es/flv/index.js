import { inherits as _inherits, createSuper as _createSuper, createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty, assertThisInitialized as _assertThisInitialized, asyncToGenerator as _asyncToGenerator, objectSpread2 as _objectSpread2, regeneratorRuntime as _regeneratorRuntime } from "../_virtual/_rollupPluginBabelHelpers.js";
import EventEmitter from "eventemitter3";
import { Logger, EVENT, StreamingError, Buffer, isMediaPlaying, NetLoader, SeiService, BandwidthService, MediaStatsService, GapService, MSE, getVideoPlaybackQuality } from "xgplayer-streaming-shared";
import { Logger as Logger$1 } from "xgplayer-transmuxer";
import { BufferService } from "./services/buffer-service.js";
import { getOption } from "./options.js";
import { searchKeyframeIndex } from "./utils.js";
var logger = new Logger("flv");
var MAX_HOLE = 0.1;
var MAX_START_GAP = 0.3;
var Flv = /* @__PURE__ */ function(_EventEmitter) {
  _inherits(Flv2, _EventEmitter);
  var _super = _createSuper(Flv2);
  function Flv2(_opts) {
    var _this;
    _classCallCheck(this, Flv2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "media", null);
    _defineProperty(_assertThisInitialized(_this), "_loading", false);
    _defineProperty(_assertThisInitialized(_this), "_opts", null);
    _defineProperty(_assertThisInitialized(_this), "_bufferService", null);
    _defineProperty(_assertThisInitialized(_this), "_gapService", null);
    _defineProperty(_assertThisInitialized(_this), "_stats", null);
    _defineProperty(_assertThisInitialized(_this), "_mediaLoader", null);
    _defineProperty(_assertThisInitialized(_this), "_maxChunkWaitTimer", null);
    _defineProperty(_assertThisInitialized(_this), "_tickTimer", null);
    _defineProperty(_assertThisInitialized(_this), "_tickInterval", 500);
    _defineProperty(_assertThisInitialized(_this), "_urlSwitching", false);
    _defineProperty(_assertThisInitialized(_this), "_seamlessSwitching", false);
    _defineProperty(_assertThisInitialized(_this), "_disconnectRetryCount", 0);
    _defineProperty(_assertThisInitialized(_this), "_preLoadEndPoint", 0);
    _defineProperty(_assertThisInitialized(_this), "_keyframes", null);
    _defineProperty(_assertThisInitialized(_this), "_acceptRanges", true);
    _defineProperty(_assertThisInitialized(_this), "_onProgress", /* @__PURE__ */ function() {
      var _ref2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(chunk, done, _ref, response) {
        var startTime, endTime, st, firstByteTime, _this$_mediaLoader, headers, _this$_bufferService, remaining, maxReaderInterval;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1)
            switch (_context.prev = _context.next) {
              case 0:
                startTime = _ref.startTime, endTime = _ref.endTime, st = _ref.st, firstByteTime = _ref.firstByteTime;
                _this._loading = !done;
                if (_this._firstProgressEmit) {
                  _context.next = 11;
                  break;
                }
                if (_this.media) {
                  _context.next = 6;
                  break;
                }
                (_this$_mediaLoader = _this._mediaLoader) === null || _this$_mediaLoader === void 0 ? void 0 : _this$_mediaLoader.cancel();
                return _context.abrupt("return");
              case 6:
                headers = response.headers;
                _this.emit(EVENT.TTFB, {
                  url: _this._opts.url,
                  responseUrl: response.url,
                  elapsed: st ? firstByteTime - st : endTime - startTime
                });
                _this.emit(EVENT.LOAD_RESPONSE_HEADERS, {
                  headers
                });
                _this._acceptRanges = !!(headers !== null && headers !== void 0 && headers.get("Accept-Ranges")) || !!(headers !== null && headers !== void 0 && headers.get("Content-Range"));
                _this._firstProgressEmit = true;
              case 11:
                if (_this._bufferService) {
                  _context.next = 13;
                  break;
                }
                return _context.abrupt("return");
              case 13:
                clearTimeout(_this._maxChunkWaitTimer);
                _this._bandwidthService.addChunkRecord(chunk === null || chunk === void 0 ? void 0 : chunk.byteLength, endTime - startTime);
                _context.prev = 15;
                _context.next = 18;
                return _this._bufferService.appendBuffer(chunk);
              case 18:
                (_this$_bufferService = _this._bufferService) === null || _this$_bufferService === void 0 ? void 0 : _this$_bufferService.evictBuffer(_this._opts.bufferBehind);
                _context.next = 31;
                break;
              case 21:
                _context.prev = 21;
                _context.t0 = _context["catch"](15);
                if (!(!_this.isLive && _this._bufferService.isFull())) {
                  _context.next = 30;
                  break;
                }
                _context.next = 26;
                return _this._mediaLoader.cancel();
              case 26:
                _this._loading = false;
                remaining = _this.bufferInfo().remaining;
                _this._opts.preloadTime = parseInt(remaining) / 2;
                return _context.abrupt("return");
              case 30:
                return _context.abrupt("return", _this._emitError(StreamingError.create(_context.t0)));
              case 31:
                if (_this._urlSwitching) {
                  _this._urlSwitching = false;
                  _this.emit(EVENT.SWITCH_URL_SUCCESS, {
                    url: _this._opts.url
                  });
                }
                if (_this._seamlessSwitching) {
                  _this._seamlessSwitching = false;
                  _this._tick();
                }
                if (!(done && !_this.media.seeking)) {
                  _context.next = 38;
                  break;
                }
                _this.emit(EVENT.LOAD_COMPLETE);
                logger.debug("load done");
                if (_this.isLive && _this._disconnectRetryCount <= 0) {
                  _this._end();
                }
                return _context.abrupt("return");
              case 38:
                if (_this.isLive) {
                  _context.next = 40;
                  break;
                }
                return _context.abrupt("return");
              case 40:
                maxReaderInterval = _this._opts.maxReaderInterval;
                if (maxReaderInterval) {
                  clearTimeout(_this._maxChunkWaitTimer);
                  _this._maxChunkWaitTimer = setTimeout(function() {
                    if (_this._disconnectRetryCount) {
                      _this._disconnectRetryCount--;
                      _this.load();
                      return;
                    }
                    logger.debug("onMaxChunkWait", maxReaderInterval);
                    _this._end();
                  }, maxReaderInterval);
                }
              case 42:
              case "end":
                return _context.stop();
            }
        }, _callee, null, [[15, 21]]);
      }));
      return function(_x, _x2, _x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }());
    _defineProperty(_assertThisInitialized(_this), "_onRetryError", function(error, retryTime) {
      logger.debug("load retry", error, retryTime);
      _this.emit(EVENT.LOAD_RETRY, {
        error: StreamingError.network(error),
        retryTime
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_end", function() {
      _this._clear();
      if (_this._bufferService) {
        _this._bufferService.endOfStream();
      }
      logger.debug("end stream");
    });
    _defineProperty(_assertThisInitialized(_this), "_resetDisconnectCount", function() {
      _this._disconnectRetryCount = _this._opts.disconnectRetryCount;
    });
    _defineProperty(_assertThisInitialized(_this), "_tick", function() {
      clearTimeout(_this._tickTimer);
      var _assertThisInitialize = _assertThisInitialized(_this), media = _assertThisInitialize.media;
      if (!media)
        return;
      _this._tickTimer = setTimeout(_this._tick, _this._tickInterval);
      var bufferEnd = Buffer.end(Buffer.get(media));
      if (bufferEnd < MAX_HOLE || !media.readyState)
        return;
      var opts = _this._opts;
      if (isMediaPlaying(media)) {
        if (_this._gapService) {
          _this._gapService.do(media, opts.maxJumpDistance, _this.isLive, 3);
        }
      } else {
        if (!media.currentTime && _this._gapService) {
          var gapJump = _this._opts.mseLowLatency || _this._opts.mseLowLatency === false && _this.bufferInfo(MAX_START_GAP).nextStart;
          if (gapJump) {
            _this._gapService.do(media, opts.maxJumpDistance, _this.isLive, 3);
          }
          return;
        }
        if (opts.isLive && media.readyState === 4 && bufferEnd > opts.disconnectTime) {
          _this.disconnect();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_onPlay", function() {
      var _this$media, _this$media$buffered;
      var canReplay = _this._opts.softDecode || ((_this$media = _this.media) === null || _this$media === void 0 ? void 0 : (_this$media$buffered = _this$media.buffered) === null || _this$media$buffered === void 0 ? void 0 : _this$media$buffered.length);
      if (_this.isLive) {
        if (!_this._loading && canReplay) {
          _this.replay(void 0, true);
        }
        return;
      }
      var info = _this.bufferInfo();
      if ((info.start || info.nextStart) > MAX_HOLE) {
        _this._tick();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_onLoadeddata", function() {
      if (_this.isLive && !_this._opts.mseLowLatency) {
        if (_this.media.duration !== Infinity) {
          _this._bufferService.updateDuration(Infinity).catch(function(e) {
          });
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_onSeeking", /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!_this.isLive && _this.seekable) {
                _this._preLoadEndPoint = -1;
                _this._checkPreload();
              }
            case 1:
            case "end":
              return _context2.stop();
          }
      }, _callee2);
    })));
    _defineProperty(_assertThisInitialized(_this), "_onTimeupdate", function() {
      if (!_this.media)
        return;
      var opts = _this._opts;
      var currentTime = _this.media.currentTime;
      if (opts.isLive && opts.maxLatency && opts.targetLatency) {
        var bufferEnd = Buffer.end(Buffer.get(_this.media));
        var latency = bufferEnd - currentTime;
        if (latency >= opts.maxLatency) {
          _this.media.currentTime = bufferEnd - opts.targetLatency;
          _this.emit(EVENT.CHASEFRAME, {
            currentTime: _this.media.currentTime,
            latency: opts.targetLatency
          });
        }
      }
      _this._seiService.throw(currentTime, true);
      if (opts.isLive || !_this.seekable || _this._loading)
        return;
      _this._checkPreload();
    });
    _defineProperty(_assertThisInitialized(_this), "_onWaiting", function() {
      if (_this.isLive && !_this._loading && _this._disconnectRetryCount) {
        _this._disconnectRetryCount--;
        _this.load();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_onBufferUpdate", function() {
      if (_this._opts.isLive)
        return;
      var _this$bufferInfo = _this.bufferInfo(), end = _this$bufferInfo.end, nextEnd = _this$bufferInfo.nextEnd;
      if (Math.abs((end || nextEnd) - _this.media.duration) < 1) {
        _this._end();
        if (_this.media.readyState <= 2) {
          _this._tick();
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_checkPreload", /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3() {
      var _this$bufferInfo2, _this$bufferInfo2$rem, remainingBuffer, opts, filepositions, times, currentTime, i, end, startByte;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              _this$bufferInfo2 = _this.bufferInfo(), _this$bufferInfo2$rem = _this$bufferInfo2.remaining, remainingBuffer = _this$bufferInfo2$rem === void 0 ? 0 : _this$bufferInfo2$rem;
              opts = _this._opts;
              filepositions = _this._keyframes.filepositions;
              times = _this._keyframes.times;
              currentTime = _this.media.currentTime;
              if (!(remainingBuffer < opts.preloadTime)) {
                _context3.next = 19;
                break;
              }
              i = searchKeyframeIndex(_this._keyframes.times, currentTime + remainingBuffer + MAX_HOLE);
              end = searchKeyframeIndex(_this._keyframes.times, currentTime + remainingBuffer + _this._opts.preloadTime);
              if (end === i) {
                end = i + 1;
              }
              if (!(_this._preLoadEndPoint === end)) {
                _context3.next = 11;
                break;
              }
              return _context3.abrupt("return");
            case 11:
              startByte = filepositions[i];
              if (!(startByte === null || startByte === void 0)) {
                _context3.next = 14;
                break;
              }
              return _context3.abrupt("return");
            case 14:
              _context3.next = 16;
              return _this._mediaLoader.cancel();
            case 16:
              _this._loadData(null, [startByte, filepositions[end]]);
              _this._preLoadEndPoint = end;
              _this._bufferService.unContiguous(times[i]);
            case 19:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    })));
    _defineProperty(_assertThisInitialized(_this), "_onFlvScriptData", function(sample) {
      var _sample$data, _sample$data$onMetaDa, _sample$data2, _sample$data2$onMetaD;
      var keyframes = (_sample$data = sample.data) === null || _sample$data === void 0 ? void 0 : (_sample$data$onMetaDa = _sample$data.onMetaData) === null || _sample$data$onMetaDa === void 0 ? void 0 : _sample$data$onMetaDa.keyframes;
      var duration = (_sample$data2 = sample.data) === null || _sample$data2 === void 0 ? void 0 : (_sample$data2$onMetaD = _sample$data2.onMetaData) === null || _sample$data2$onMetaD === void 0 ? void 0 : _sample$data2$onMetaD.duration;
      if (keyframes) {
        _this._keyframes = keyframes;
      }
      if (!_this._opts.isLive && duration) {
        _this._bufferService.updateDuration(duration);
      }
    });
    _this._opts = getOption(_opts);
    _this.media = _this._opts.media || document.createElement("video");
    _this._opts.media = null;
    _this._firstProgressEmit = false;
    _this._mediaLoader = new NetLoader(_objectSpread2(_objectSpread2({}, _this._opts.fetchOptions), {}, {
      retry: _this._opts.retryCount,
      retryDelay: _this._opts.retryDelay,
      timeout: _this._opts.loadTimeout,
      onRetryError: _this._onRetryError,
      onProgress: _this._onProgress,
      responseType: "arraybuffer"
    }));
    _this._disconnectRetryCount = _this._opts.disconnectRetryCount;
    _this._bufferService = new BufferService(_assertThisInitialized(_this), _this._opts.softDecode ? _this.media : void 0, _this._opts);
    _this._seiService = new SeiService(_assertThisInitialized(_this));
    _this._bandwidthService = new BandwidthService();
    _this._stats = new MediaStatsService(_assertThisInitialized(_this));
    if (!_this._opts.softDecode) {
      _this._gapService = new GapService();
    }
    _this.media.addEventListener("play", _this._onPlay);
    _this.media.addEventListener("loadeddata", _this._onLoadeddata);
    _this.media.addEventListener("seeking", _this._onSeeking);
    _this.media.addEventListener("timeupdate", _this._onTimeupdate);
    _this.media.addEventListener("progress", _this._onBufferUpdate);
    _this.media.addEventListener("waiting", _this._onWaiting);
    _this.on(EVENT.FLV_SCRIPT_DATA, _this._onFlvScriptData);
    return _this;
  }
  _createClass(Flv2, [{
    key: "version",
    get: function get() {
      return "3.0.17";
    }
  }, {
    key: "isLive",
    get: function get() {
      return this._opts.isLive;
    }
  }, {
    key: "baseDts",
    get: function get() {
      var _this$_bufferService2;
      return (_this$_bufferService2 = this._bufferService) === null || _this$_bufferService2 === void 0 ? void 0 : _this$_bufferService2.baseDts;
    }
  }, {
    key: "seekable",
    get: function get() {
      return !!this._keyframes && this._acceptRanges;
    }
  }, {
    key: "loader",
    get: function get() {
      return this._mediaLoader;
    }
  }, {
    key: "blobUrl",
    get: function get() {
      var _this$_bufferService3;
      return (_this$_bufferService3 = this._bufferService) === null || _this$_bufferService3 === void 0 ? void 0 : _this$_bufferService3.blobUrl;
    }
  }, {
    key: "speedInfo",
    value: function speedInfo() {
      return {
        speed: this._bandwidthService.getLatestSpeed(),
        avgSpeed: this._bandwidthService.getAvgSpeed()
      };
    }
  }, {
    key: "getStats",
    value: function getStats() {
      return this._stats.getStats();
    }
  }, {
    key: "bufferInfo",
    value: function bufferInfo() {
      var _this$media2;
      var maxHole = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : MAX_HOLE;
      return Buffer.info(Buffer.get(this.media), (_this$media2 = this.media) === null || _this$media2 === void 0 ? void 0 : _this$media2.currentTime, maxHole);
    }
  }, {
    key: "playbackQuality",
    value: function playbackQuality() {
      return getVideoPlaybackQuality(this.media);
    }
  }, {
    key: "load",
    value: function() {
      var _load = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee4(url) {
        var reuseMse, _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1)
            switch (_context4.prev = _context4.next) {
              case 0:
                reuseMse = _args4.length > 1 && _args4[1] !== void 0 ? _args4[1] : false;
                if (this._bufferService) {
                  _context4.next = 3;
                  break;
                }
                return _context4.abrupt("return");
              case 3:
                _context4.next = 5;
                return this._reset(reuseMse);
              case 5:
                this._loadData(url, this._opts.isLive ? [] : [0, this._opts.defaultVodLoadSize]);
                clearTimeout(this._tickTimer);
                this._tickTimer = setTimeout(this._tick, this._tickInterval);
              case 8:
              case "end":
                return _context4.stop();
            }
        }, _callee4, this);
      }));
      function load(_x5) {
        return _load.apply(this, arguments);
      }
      return load;
    }()
  }, {
    key: "replay",
    value: function() {
      var _replay = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee5() {
        var _this2 = this;
        var seamlesslyReload, isPlayEmit, _args5 = arguments;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1)
            switch (_context5.prev = _context5.next) {
              case 0:
                seamlesslyReload = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : this._opts.seamlesslyReload;
                isPlayEmit = _args5.length > 1 ? _args5[1] : void 0;
                if (this.media) {
                  _context5.next = 4;
                  break;
                }
                return _context5.abrupt("return");
              case 4:
                this._resetDisconnectCount();
                if (!seamlesslyReload) {
                  _context5.next = 11;
                  break;
                }
                _context5.next = 8;
                return this._clear();
              case 8:
                setTimeout(function() {
                  _this2._loadData(_this2._opts.url);
                  _this2._bufferService.seamlessSwitch();
                  _this2._seamlessSwitching = true;
                });
                _context5.next = 13;
                break;
              case 11:
                _context5.next = 13;
                return this.load();
              case 13:
                return _context5.abrupt("return", this.media.play(!isPlayEmit).catch(function() {
                }));
              case 14:
              case "end":
                return _context5.stop();
            }
        }, _callee5, this);
      }));
      function replay() {
        return _replay.apply(this, arguments);
      }
      return replay;
    }()
  }, {
    key: "disconnect",
    value: function disconnect() {
      logger.debug("disconnect!");
      return this._clear();
    }
  }, {
    key: "switchURL",
    value: function() {
      var _switchURL = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee6(url, seamless) {
        var _this3 = this;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1)
            switch (_context6.prev = _context6.next) {
              case 0:
                if (this._bufferService) {
                  _context6.next = 2;
                  break;
                }
                return _context6.abrupt("return");
              case 2:
                this._resetDisconnectCount();
                if (!(!seamless || !this._opts.isLive)) {
                  _context6.next = 8;
                  break;
                }
                _context6.next = 6;
                return this.load(url);
              case 6:
                this._urlSwitching = true;
                return _context6.abrupt("return", this.media.play(true).catch(function() {
                }));
              case 8:
                _context6.next = 10;
                return this._clear();
              case 10:
                setTimeout(function() {
                  _this3._urlSwitching = true;
                  _this3._seamlessSwitching = true;
                  _this3._loadData(url);
                  _this3._bufferService.seamlessSwitch();
                });
              case 11:
              case "end":
                return _context6.stop();
            }
        }, _callee6, this);
      }));
      function switchURL(_x6, _x7) {
        return _switchURL.apply(this, arguments);
      }
      return switchURL;
    }()
  }, {
    key: "destroy",
    value: function() {
      var _destroy = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee7() {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1)
            switch (_context7.prev = _context7.next) {
              case 0:
                if (this.media) {
                  _context7.next = 2;
                  break;
                }
                return _context7.abrupt("return");
              case 2:
                this.removeAllListeners();
                this._seiService.reset();
                this.media.removeEventListener("play", this._onPlay);
                this.media.removeEventListener("loadeddata", this._onLoadeddata);
                this.media.removeEventListener("seeking", this._onSeeking);
                this.media.removeEventListener("timeupdate", this._onTimeupdate);
                this.media.removeEventListener("waiting", this._onWaiting);
                this.media.removeEventListener("progress", this._onBufferUpdate);
                _context7.next = 12;
                return Promise.all([this._clear(), this._bufferService.destroy()]);
              case 12:
                this.media = null;
                this._bufferService = null;
              case 14:
              case "end":
                return _context7.stop();
            }
        }, _callee7, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
  }, {
    key: "_emitError",
    value: function _emitError(error) {
      var _this$media3;
      var endOfStream = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      logger.table(error);
      logger.error(error);
      logger.error((_this$media3 = this.media) === null || _this$media3 === void 0 ? void 0 : _this$media3.error);
      if (this._urlSwitching) {
        this._urlSwitching = false;
        this._seamlessSwitching = false;
        this.emit(EVENT.SWITCH_URL_FAILED, error);
      }
      this.emit(EVENT.ERROR, error);
      if (endOfStream) {
        this._seiService.reset();
        this._end();
      }
    }
  }, {
    key: "_reset",
    value: function() {
      var _reset2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee8() {
        var reuseMse, _args8 = arguments;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1)
            switch (_context8.prev = _context8.next) {
              case 0:
                reuseMse = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : false;
                this._seiService.reset();
                this._bandwidthService.reset();
                this._stats.reset();
                _context8.next = 6;
                return this._clear();
              case 6:
                _context8.next = 8;
                return this._bufferService.reset(reuseMse);
              case 8:
              case "end":
                return _context8.stop();
            }
        }, _callee8, this);
      }));
      function _reset() {
        return _reset2.apply(this, arguments);
      }
      return _reset;
    }()
  }, {
    key: "_loadData",
    value: function() {
      var _loadData2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee9(url, range) {
        var finnalUrl;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1)
            switch (_context9.prev = _context9.next) {
              case 0:
                if (url)
                  this._opts.url = url;
                finnalUrl = url = this._opts.url;
                if (url) {
                  _context9.next = 4;
                  break;
                }
                throw new Error("Source url is missing");
              case 4:
                if (this._opts.preProcessUrl) {
                  finnalUrl = this._opts.preProcessUrl(url).url;
                }
                this._mediaLoader.finnalUrl = finnalUrl;
                this.emit(EVENT.LOAD_START, {
                  url: finnalUrl,
                  seamlessSwitching: this._seamlessSwitching
                });
                logger.debug("load data, loading:", this._loading, finnalUrl);
                if (!this._loading) {
                  _context9.next = 11;
                  break;
                }
                _context9.next = 11;
                return this._mediaLoader.cancel();
              case 11:
                this._loading = true;
                _context9.prev = 12;
                _context9.next = 15;
                return this._mediaLoader.load({
                  url: finnalUrl,
                  range
                });
              case 15:
                _context9.next = 21;
                break;
              case 17:
                _context9.prev = 17;
                _context9.t0 = _context9["catch"](12);
                this._loading = false;
                return _context9.abrupt("return", this._emitError(StreamingError.network(_context9.t0)));
              case 21:
              case "end":
                return _context9.stop();
            }
        }, _callee9, this, [[12, 17]]);
      }));
      function _loadData(_x8, _x9) {
        return _loadData2.apply(this, arguments);
      }
      return _loadData;
    }()
  }, {
    key: "_clear",
    value: function() {
      var _clear2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1)
            switch (_context10.prev = _context10.next) {
              case 0:
                if (!this._mediaLoader) {
                  _context10.next = 3;
                  break;
                }
                _context10.next = 3;
                return this._mediaLoader.cancel();
              case 3:
                clearTimeout(this._maxChunkWaitTimer);
                clearTimeout(this._tickTimer);
                this._loading = false;
                this._firstProgressEmit = false;
              case 7:
              case "end":
                return _context10.stop();
            }
        }, _callee10, this);
      }));
      function _clear() {
        return _clear2.apply(this, arguments);
      }
      return _clear;
    }()
  }], [{
    key: "isSupported",
    value: function isSupported(mediaType) {
      if (!mediaType || mediaType === "video" || mediaType === "audio") {
        return MSE.isSupported();
      }
      return typeof WebAssembly !== "undefined";
    }
  }, {
    key: "enableLogger",
    value: function enableLogger() {
      Logger.enable();
      Logger$1.enable();
    }
  }, {
    key: "disableLogger",
    value: function disableLogger() {
      Logger.disable();
      Logger$1.disable();
    }
  }]);
  return Flv2;
}(EventEmitter);
try {
  if (localStorage.getItem("xgd")) {
    Flv.enableLogger();
  } else {
    Flv.disableLogger();
  }
} catch (error) {
}
export { Flv, logger };
