import { defineProperty as _defineProperty, inherits as _inherits, createSuper as _createSuper, createClass as _createClass, classCallCheck as _classCallCheck, wrapNativeSuper as _wrapNativeSuper, asyncToGenerator as _asyncToGenerator, regeneratorRuntime as _regeneratorRuntime } from "./_virtual/_rollupPluginBabelHelpers.js";
import { Buffer } from "./buffer.js";
import { isBrowser } from "./env.js";
import { StreamingError, ERR } from "./error.js";
import { Logger } from "./logger.js";
import { createPublicPromise, nowTime, SafeJSON } from "./utils.js";
function getMediaSource() {
  var preferMMS = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  try {
    if (!isBrowser)
      return null;
    if (preferMMS && typeof ManagedMediaSource !== "undefined")
      return ManagedMediaSource;
    return window.MediaSource;
  } catch (e) {
  }
}
function isMMS(mediaSource) {
  return /ManagedMediaSource/gi.test(Object.prototype.toString.call(mediaSource));
}
function getTimeRanges(buffered) {
  var ranges = [];
  if (buffered instanceof TimeRanges) {
    for (var i = 0; i < buffered.length; i++) {
      ranges.push({
        start: buffered.start(i),
        end: buffered.end(i)
      });
    }
  }
  return ranges;
}
var MSEErrorType = {
  UPDATE_ERROR: "updateError"
};
var OP_NAME = {
  APPEND: "appendBuffer",
  REMOVE: "removeBuffer",
  UPDATE_DURATION: "updateDuration"
};
var MSEError = /* @__PURE__ */ function(_Error) {
  _inherits(MSEError2, _Error);
  var _super = _createSuper(MSEError2);
  function MSEError2(type, msg) {
    var _this;
    _classCallCheck(this, MSEError2);
    _this = _super.call(this, msg || type);
    _this.type = type;
    _this.msg = msg;
    return _this;
  }
  return _createClass(MSEError2);
}(/* @__PURE__ */ _wrapNativeSuper(Error));
var MSE = /* @__PURE__ */ function() {
  function MSE2(media, config) {
    var _this2 = this;
    _classCallCheck(this, MSE2);
    _defineProperty(this, "media", null);
    _defineProperty(this, "mediaSource", null);
    _defineProperty(this, "_openPromise", createPublicPromise());
    _defineProperty(this, "_queue", /* @__PURE__ */ Object.create(null));
    _defineProperty(this, "_sourceBuffer", /* @__PURE__ */ Object.create(null));
    _defineProperty(this, "_mseFullFlag", {});
    _defineProperty(this, "_st", 0);
    _defineProperty(this, "_opst", 0);
    _defineProperty(this, "_logger", null);
    _defineProperty(this, "_config", null);
    _defineProperty(this, "_url", null);
    _defineProperty(this, "_onStartStreaming", function() {
      _this2._logger.debug("startstreaming");
    });
    _defineProperty(this, "_onEndStreaming", function() {
      _this2._logger.debug("endstreaming");
    });
    _defineProperty(this, "_onSBUpdateEnd", function(type) {
      var queue = _this2._queue[type];
      if (queue) {
        var op = queue[0];
        if (!((op === null || op === void 0 ? void 0 : op.opName) === OP_NAME.UPDATE_DURATION)) {
          queue.shift();
        }
        if (op) {
          var _this2$_sourceBuffer$;
          var costtime = nowTime() - _this2._opst;
          _this2._logger.debug("UpdateEnd(".concat(type, "/").concat(op.opName, ")"), SafeJSON.stringify(getTimeRanges((_this2$_sourceBuffer$ = _this2._sourceBuffer[type]) === null || _this2$_sourceBuffer$ === void 0 ? void 0 : _this2$_sourceBuffer$.buffered)), costtime, op.context);
          op.promise.resolve({
            name: op.opName,
            context: op.context,
            costtime
          });
          _this2._startQueue(type);
        }
      }
    });
    _defineProperty(this, "_onSBUpdateError", function(type, event) {
      var queue = _this2._queue[type];
      if (queue) {
        var op = queue[0];
        if (op) {
          _this2._logger.error("UpdateError", type, op.opName, op.context);
          op.promise.reject(new StreamingError(ERR.MEDIA, ERR.SUB_TYPES.MSE_APPEND_BUFFER, event));
        }
      }
    });
    this._config = Object.assign(MSE2.getDefaultConfig(), config);
    if (media)
      this.bindMedia(media);
    this._logger = new Logger("MSE");
    if (this._config.openLog) {
      Logger.enable();
    }
  }
  _createClass(MSE2, [{
    key: "isOpened",
    get: function get() {
      var _this$mediaSource;
      return ((_this$mediaSource = this.mediaSource) === null || _this$mediaSource === void 0 ? void 0 : _this$mediaSource.readyState) === "open";
    }
  }, {
    key: "hasOpTasks",
    get: function get() {
      var _this3 = this;
      var flag = false;
      Object.keys(this._queue).forEach(function(k) {
        var queue = _this3._queue[k];
        if (Array.isArray(queue)) {
          flag || (flag = queue.length > 0);
        }
      });
      return flag;
    }
  }, {
    key: "url",
    get: function get() {
      return this._url;
    }
  }, {
    key: "duration",
    get: function get() {
      var _this$mediaSource2;
      return ((_this$mediaSource2 = this.mediaSource) === null || _this$mediaSource2 === void 0 ? void 0 : _this$mediaSource2.duration) || -1;
    }
  }, {
    key: "isEnded",
    get: function get() {
      return this.mediaSource ? this.mediaSource.readyState === "ended" : false;
    }
  }, {
    key: "streaming",
    get: function get() {
      return isMMS(this.mediaSource) ? this.mediaSource.streaming : true;
    }
  }, {
    key: "isFull",
    value: function isFull(type) {
      return type ? this._mseFullFlag[type] : this._mseFullFlag[MSE2.VIDEO];
    }
  }, {
    key: "updateDuration",
    value: function updateDuration(duration) {
      var _this4 = this;
      var isReduceDuration = this.mediaSource && this.mediaSource.duration > duration;
      if (this.mediaSource && this.mediaSource.duration > duration) {
        var bufferEnd = 0;
        Object.keys(this._sourceBuffer).forEach(function(k) {
          try {
            bufferEnd = Math.max(_this4.bufferEnd(k) || 0, bufferEnd);
          } catch (error) {
          }
        });
        if (duration < bufferEnd) {
          return Promise.resolve();
        }
      }
      return this._enqueueBlockingOp(function() {
        if (_this4.isEnded) {
          _this4._logger.debug("setDuration but ended");
          return;
        }
        if (_this4.mediaSource) {
          _this4.mediaSource.duration = duration;
          _this4._logger.debug("setDuration", duration);
        }
      }, OP_NAME.UPDATE_DURATION, {
        isReduceDuration
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this5 = this;
      if (this._openPromise.used && !this.isOpened && this.mediaSource) {
        var ms = this.mediaSource;
        var onOpen = function onOpen2() {
          var costTime = nowTime() - _this5._st;
          _this5._logger.debug("sourceopen", costTime);
          ms.removeEventListener("sourceopen", onOpen2);
          _this5._openPromise.resolve({
            costtime: costTime
          });
        };
        ms.addEventListener("sourceopen", onOpen);
        this._openPromise = createPublicPromise();
      }
      return this._openPromise;
    }
  }, {
    key: "bindMedia",
    value: function() {
      var _bindMedia = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(media) {
        var _this6 = this;
        var MediaSource2, ms, useMMS, onOpen;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1)
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.mediaSource || this.media)) {
                  _context.next = 3;
                  break;
                }
                _context.next = 3;
                return this.unbindMedia();
              case 3:
                MediaSource2 = getMediaSource(this._config.preferMMS);
                if (!(!media || !MediaSource2)) {
                  _context.next = 6;
                  break;
                }
                throw new Error("Param media or MediaSource does not exist");
              case 6:
                this.media = media;
                ms = this.mediaSource = new MediaSource2();
                useMMS = isMMS(ms);
                this._st = nowTime();
                onOpen = function onOpen2() {
                  var costTime = nowTime() - _this6._st;
                  _this6._logger.debug("sourceopen");
                  ms.removeEventListener("sourceopen", onOpen2);
                  URL.revokeObjectURL(media.src);
                  _this6._openPromise.resolve({
                    costtime: costTime
                  });
                };
                ms.addEventListener("sourceopen", onOpen);
                if (useMMS) {
                  ms.addEventListener("startstreaming", this._onStartStreaming);
                  ms.addEventListener("endstreaming", this._onEndStreaming);
                }
                this._url = URL.createObjectURL(ms);
                media.src = this._url;
                media.disableRemotePlayback = useMMS;
                return _context.abrupt("return", this._openPromise);
              case 17:
              case "end":
                return _context.stop();
            }
        }, _callee, this);
      }));
      function bindMedia(_x) {
        return _bindMedia.apply(this, arguments);
      }
      return bindMedia;
    }()
  }, {
    key: "unbindMedia",
    value: function() {
      var _unbindMedia = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2() {
        var _this7 = this;
        var ms, hasMetadata, mseOpen;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1)
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this._openPromise.used)
                  this._openPromise.resolve();
                ms = this.mediaSource;
                if (ms) {
                  Object.keys(this._queue).forEach(function(t) {
                    var queue = _this7._queue[t];
                    if (queue) {
                      queue.forEach(function(x) {
                        var _x$promise, _x$promise$resolve;
                        return (_x$promise = x.promise) === null || _x$promise === void 0 ? void 0 : (_x$promise$resolve = _x$promise.resolve) === null || _x$promise$resolve === void 0 ? void 0 : _x$promise$resolve.call(_x$promise);
                      });
                    }
                  });
                  hasMetadata = !!this.media && this.media.readyState >= 1;
                  mseOpen = ms.readyState === "open";
                  if (hasMetadata && mseOpen) {
                    try {
                      ms.endOfStream();
                    } catch (error) {
                    }
                  }
                  Object.keys(this._sourceBuffer).forEach(function(k) {
                    try {
                      ms.removeSourceBuffer(_this7._sourceBuffer[k]);
                    } catch (error) {
                    }
                  });
                  if (isMMS(ms)) {
                    ms.removeEventListener("startstreaming", this._onStartStreaming);
                    ms.removeEventListener("endstreaming", this._onEndStreaming);
                  }
                }
                if (this.media) {
                  this.media.disableRemotePlayback = false;
                  this.media.removeAttribute("src");
                  try {
                    this.media.load();
                  } catch (error) {
                  }
                  this.media = null;
                }
                this.mediaSource = null;
                this._openPromise = createPublicPromise();
                this._queue = /* @__PURE__ */ Object.create(null);
                this._sourceBuffer = /* @__PURE__ */ Object.create(null);
              case 8:
              case "end":
                return _context2.stop();
            }
        }, _callee2, this);
      }));
      function unbindMedia() {
        return _unbindMedia.apply(this, arguments);
      }
      return unbindMedia;
    }()
  }, {
    key: "createSource",
    value: function createSource(type, mimeType) {
      if (this._sourceBuffer[type] || !this.mediaSource)
        return;
      var sb;
      try {
        sb = this._sourceBuffer[type] = this.mediaSource.addSourceBuffer(mimeType);
      } catch (error) {
        throw new StreamingError(ERR.MEDIA, ERR.SUB_TYPES.MSE_ADD_SB, error);
      }
      sb.mimeType = mimeType;
      sb.addEventListener("updateend", this._onSBUpdateEnd.bind(this, type));
      sb.addEventListener("error", this._onSBUpdateError.bind(this, type));
    }
  }, {
    key: "changeType",
    value: function changeType(type, mimeType) {
      var _this8 = this;
      var sb = this._sourceBuffer[type];
      if (!this.mediaSource || !sb || sb.mimeType === mimeType)
        return Promise.resolve();
      if (typeof sb.changeType !== "function")
        return Promise.reject();
      return this._enqueueOp(type, function() {
        sb.changeType(mimeType);
        sb.mimeType = mimeType;
        _this8._onSBUpdateEnd(type);
      }, "changeType", {
        mimeType
      });
    }
  }, {
    key: "createOrChangeSource",
    value: function createOrChangeSource(type, mimeType) {
      this.createSource(type, mimeType);
      return this.changeType(type, mimeType);
    }
  }, {
    key: "append",
    value: function append(type, buffer, context) {
      var _this9 = this;
      if (!buffer || !buffer.byteLength) {
        return Promise.resolve();
      }
      if (!this._sourceBuffer[type])
        return Promise.resolve();
      return this._enqueueOp(type, function() {
        var _this9$_sourceBuffer$;
        if (!_this9.mediaSource || _this9.media.error)
          return;
        _this9._logger.debug("MSE APPEND START", context);
        _this9._opst = nowTime();
        (_this9$_sourceBuffer$ = _this9._sourceBuffer[type]) === null || _this9$_sourceBuffer$ === void 0 ? void 0 : _this9$_sourceBuffer$.appendBuffer(buffer);
      }, OP_NAME.APPEND, context);
    }
  }, {
    key: "remove",
    value: function remove(type, startTime, endTime, context) {
      var _this10 = this;
      var isInsertHead = false;
      if (this._mseFullFlag[type]) {
        isInsertHead = true;
      }
      return this._enqueueOp(type, function() {
        if (!_this10.mediaSource || _this10.media.error)
          return;
        var sb = _this10._sourceBuffer[type];
        if (startTime >= endTime || !sb) {
          _this10._onSBUpdateEnd(type);
          return;
        }
        _this10._opst = nowTime();
        _this10._logger.debug("MSE REMOVE START", type, startTime, endTime, context);
        sb.remove(startTime, endTime);
      }, OP_NAME.REMOVE, context, isInsertHead);
    }
  }, {
    key: "clearBuffer",
    value: function clearBuffer(startTime, endTime) {
      var _this11 = this;
      var p;
      Object.keys(this._sourceBuffer).forEach(function(k) {
        p = _this11.remove(k, startTime, endTime);
      });
      return p || Promise.resolve();
    }
  }, {
    key: "clearAllBuffer",
    value: function clearAllBuffer() {
      var _this12 = this;
      var p;
      Object.keys(this._sourceBuffer).forEach(function(k) {
        var sb = _this12._sourceBuffer[k];
        p = _this12.remove(k, 0, Buffer.end(Buffer.get(sb)));
      });
      return p;
    }
  }, {
    key: "clearOpQueues",
    value: function clearOpQueues(type, allClear) {
      var _this$_queue$type;
      this._logger.debug("MSE clearOpQueue START");
      var queue = this._queue[type];
      if (allClear && queue) {
        this._queue[type] = [];
        return;
      }
      if (!queue || !queue[type] || queue.length < 5)
        return;
      var initQueue = [];
      queue.forEach(function(op) {
        if (op.context && op.context.isinit) {
          initQueue.push(op);
        }
      });
      this._queue[type] = queue.slice(0, 2);
      initQueue.length > 0 && (_this$_queue$type = this._queue[type]).push.apply(_this$_queue$type, initQueue);
    }
  }, {
    key: "endOfStream",
    value: function endOfStream(reason) {
      var _this13 = this;
      if (!this.mediaSource || this.mediaSource.readyState !== "open")
        return Promise.resolve();
      return this._enqueueBlockingOp(function() {
        var ms = _this13.mediaSource;
        if (!ms || ms.readyState !== "open")
          return;
        _this13._logger.debug("MSE endOfStream START");
        if (reason) {
          ms.endOfStream(reason);
        } else {
          ms.endOfStream();
        }
      }, "endOfStream");
    }
  }, {
    key: "setLiveSeekableRange",
    value: function setLiveSeekableRange(start, end) {
      var ms = this.mediaSource;
      if (start < 0 || end < start || !(ms !== null && ms !== void 0 && ms.setLiveSeekableRange) || ms.readyState !== "open")
        return;
      ms.setLiveSeekableRange(start, end);
    }
  }, {
    key: "getSourceBuffer",
    value: function getSourceBuffer(type) {
      return this._sourceBuffer[type];
    }
  }, {
    key: "buffered",
    value: function buffered(type) {
      return Buffer.get(this._sourceBuffer[type]);
    }
  }, {
    key: "bufferStart",
    value: function bufferStart(type) {
      return Buffer.start(this.buffered(type));
    }
  }, {
    key: "bufferEnd",
    value: function bufferEnd(type) {
      return Buffer.end(this.buffered(type));
    }
  }, {
    key: "_enqueueOp",
    value: function _enqueueOp(type, exec, opName, context, isInsertHead) {
      var _this14 = this;
      if (!this.mediaSource)
        return Promise.resolve();
      var queue = this._queue[type] = this._queue[type] || [];
      var op = {
        exec,
        promise: createPublicPromise(),
        opName,
        context
      };
      if (isInsertHead) {
        queue.splice(0, 0, op);
        this._mseFullFlag[type] = false;
        this._startQueue(type);
      } else {
        queue.push(op);
      }
      if (this.isOpened || this.isEnded) {
        if (queue.length === 1) {
          this._startQueue(type);
        }
      } else {
        this._openPromise.then(function() {
          if (queue.length === 1) {
            _this14._startQueue(type);
          }
        });
      }
      return op.promise;
    }
  }, {
    key: "_enqueueBlockingOp",
    value: function() {
      var _enqueueBlockingOp2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(exec, opName, context) {
        var _this15 = this;
        var types, waiters;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1)
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.mediaSource) {
                  _context3.next = 2;
                  break;
                }
                return _context3.abrupt("return", Promise.resolve());
              case 2:
                types = Object.keys(this._sourceBuffer);
                if (types.length) {
                  _context3.next = 5;
                  break;
                }
                return _context3.abrupt("return", exec());
              case 5:
                waiters = [];
                types.forEach(function(t) {
                  var queue = _this15._queue[t];
                  var prom = createPublicPromise();
                  waiters.push(prom);
                  queue.push({
                    exec: function exec2() {
                      prom.resolve();
                    },
                    promise: prom,
                    opName,
                    context
                  });
                  if (queue.length === 1) {
                    _this15._startQueue(t);
                  }
                });
                return _context3.abrupt("return", Promise.all(waiters).then(function() {
                  try {
                    return exec();
                  } finally {
                    types.forEach(function(t) {
                      var queue = _this15._queue[t];
                      var sb = _this15._sourceBuffer[t];
                      queue === null || queue === void 0 ? void 0 : queue.shift();
                      if (!sb || !sb.updating) {
                        _this15._startQueue(t);
                      }
                    });
                  }
                }));
              case 8:
              case "end":
                return _context3.stop();
            }
        }, _callee3, this);
      }));
      function _enqueueBlockingOp(_x2, _x3, _x4) {
        return _enqueueBlockingOp2.apply(this, arguments);
      }
      return _enqueueBlockingOp;
    }()
  }, {
    key: "_startQueue",
    value: function _startQueue(type) {
      var queue = this._queue[type];
      if (queue) {
        var op = queue[0];
        if (op && !this._mseFullFlag[type]) {
          try {
            op.exec();
          } catch (error) {
            if (error && error.message && error.message.indexOf("SourceBuffer is full") >= 0) {
              this._mseFullFlag[type] = true;
              this._logger.error("[MSE error],  context,", op.context, " ,name,", op.opName, ",err,SourceBuffer is full");
              op.promise.reject(new StreamingError(ERR.MEDIA, ERR.SUB_TYPES.MSE_FULL, error));
            } else {
              this._logger.error(error);
              op.promise.reject(new StreamingError(ERR.MEDIA, ERR.SUB_TYPES.MSE_OTHER, error));
              queue.shift();
              this._startQueue(type);
            }
          }
        }
      }
    }
  }, {
    key: "setTimeoffset",
    value: function setTimeoffset(type, timestampOffset, context) {
      var _this16 = this;
      return this._enqueueOp(type, function() {
        if (timestampOffset < 0) {
          timestampOffset += 1e-3;
        }
        _this16._sourceBuffer[type].timestampOffset = timestampOffset;
        _this16._onSBUpdateEnd(type);
      }, "setTimeoffset", context);
    }
  }, {
    key: "abort",
    value: function abort(type, context) {
      var _this17 = this;
      if (!this.isOpened) {
        return Promise.resolve();
      }
      return this._enqueueOp(type, function() {
        _this17._sourceBuffer[type].abort();
        _this17._onSBUpdateEnd(type);
      }, "abort", context);
    }
  }], [{
    key: "isSupported",
    value: function isSupported() {
      var mime = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'video/mp4; codecs="avc1.42E01E,mp4a.40.2"';
      var MediaSource2 = getMediaSource();
      if (!MediaSource2)
        return false;
      try {
        return MediaSource2.isTypeSupported(mime);
      } catch (error) {
        this._logger.error(mime, error);
        return false;
      }
    }
  }, {
    key: "isMMSOnly",
    value: function isMMSOnly() {
      return typeof ManagedMediaSource !== "undefined" && typeof MediaSource === "undefined";
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      return {
        openLog: false,
        preferMMS: false
      };
    }
  }]);
  return MSE2;
}();
_defineProperty(MSE, "VIDEO", "video");
_defineProperty(MSE, "AUDIO", "audio");
export { MSE, MSEError, MSEErrorType };
