export class MP4Loader {
    constructor(config: any);
    vid: string;
    url: string;
    meta: {};
    downloadInfo: any[];
    videoSegments: any[];
    audioSegments: any[];
    cache: any;
    _currentSegmentIndex: number;
    _currentLoadingSegmentIndex: number;
    buffer: any;
    _error: any;
    _config: any;
    logger: Logger;
    _loader: NetLoader;
    get isMetaLoaded(): number;
    setCurrentSegment(segIndex: any): void;
    isLastSegment(segIndex: any): boolean;
    isSegmentLoading(segIndex: any): boolean;
    changeUrl(url: any, vid: any, moovEnd: any, notCancelLoader: any): Promise<void>;
    getOrLoadMeta(cache: any): Promise<{}>;
    loadMetaProcess(cache: any, [moovStart, moovEnd]: [any, any], onProgress: any, config: any): Promise<void>;
    loadMeta(cache: any, moovEnd: any, config: any): Promise<{
        meta: {};
        videoSegments: any[];
        audioSegments: any[];
        responses: any[];
    }>;
    loadCacheMeta(meta: any, segmentIndex: any): void;
    getSegmentByTime(time: any): {
        video: any;
        audio: any;
    };
    loadSegmentByTime(time: any, cache: any, changeCurrent?: boolean, config?: {}): Promise<any>;
    loadNextSegment(cache: any, changeCurrent?: boolean, config?: {}): Promise<any>;
    preload(time: any): Promise<void>;
    cancel(): Promise<void>;
    reset(notCancelLoader?: boolean): Promise<void>;
    destroy(): Promise<void>;
    _loadSegment(video: any, audio: any, cache: any, changeCurrent: any, config: any): Promise<any>;
    loadData(range: any, cache: any, config: any): Promise<any>;
    _transformError: (error: any) => any;
    _getCacheKey(range: any): string;
}
import { Logger } from "xgplayer-streaming-shared";
import { NetLoader } from "../../xgplayer-streaming-shared/es/net";
