import { toConsumableArray as _toConsumableArray } from "./_virtual/_rollupPluginBabelHelpers.js";
function moovToSegments(moov, duration) {
  var tracks = moov.trak;
  if (!tracks || !tracks.length)
    return;
  var videoTrack = tracks.find(function(t) {
    var _t$mdia, _t$mdia$hdlr;
    return ((_t$mdia = t.mdia) === null || _t$mdia === void 0 ? void 0 : (_t$mdia$hdlr = _t$mdia.hdlr) === null || _t$mdia$hdlr === void 0 ? void 0 : _t$mdia$hdlr.handlerType) === "vide";
  });
  var audioTrack = tracks.find(function(t) {
    var _t$mdia2, _t$mdia2$hdlr;
    return ((_t$mdia2 = t.mdia) === null || _t$mdia2 === void 0 ? void 0 : (_t$mdia2$hdlr = _t$mdia2.hdlr) === null || _t$mdia2$hdlr === void 0 ? void 0 : _t$mdia2$hdlr.handlerType) === "soun";
  });
  if (!videoTrack && !audioTrack)
    return;
  var videoSegments = [];
  var audioSegments = [];
  var segmentDurations;
  if (videoTrack) {
    var _videoTrack$mdia, _videoTrack$mdia$minf, _videoTrack$mdia$mdhd;
    var videoStbl = (_videoTrack$mdia = videoTrack.mdia) === null || _videoTrack$mdia === void 0 ? void 0 : (_videoTrack$mdia$minf = _videoTrack$mdia.minf) === null || _videoTrack$mdia$minf === void 0 ? void 0 : _videoTrack$mdia$minf.stbl;
    if (!videoStbl)
      return;
    var timescale = (_videoTrack$mdia$mdhd = videoTrack.mdia.mdhd) === null || _videoTrack$mdia$mdhd === void 0 ? void 0 : _videoTrack$mdia$mdhd.timescale;
    var stts = videoStbl.stts, stsc = videoStbl.stsc, stsz = videoStbl.stsz, stco = videoStbl.stco, stss = videoStbl.stss, ctts = videoStbl.ctts;
    if (!timescale || !stts || !stsc || !stsz || !stco || !stss)
      return;
    videoSegments = getSegments(duration, timescale, stts, stsc, stsz, stco, stss, ctts);
    segmentDurations = videoSegments.map(function(x) {
      return x.duration;
    });
  }
  if (audioTrack) {
    var _audioTrack$mdia, _audioTrack$mdia$minf, _audioTrack$mdia$mdhd;
    var audioStbl = (_audioTrack$mdia = audioTrack.mdia) === null || _audioTrack$mdia === void 0 ? void 0 : (_audioTrack$mdia$minf = _audioTrack$mdia.minf) === null || _audioTrack$mdia$minf === void 0 ? void 0 : _audioTrack$mdia$minf.stbl;
    if (!audioStbl)
      return;
    var _timescale = (_audioTrack$mdia$mdhd = audioTrack.mdia.mdhd) === null || _audioTrack$mdia$mdhd === void 0 ? void 0 : _audioTrack$mdia$mdhd.timescale;
    var _stts = audioStbl.stts, _stsc = audioStbl.stsc, _stsz = audioStbl.stsz, _stco = audioStbl.stco;
    if (!_timescale || !_stts || !_stsc || !_stsz || !_stco)
      return;
    audioSegments = getSegments(duration, _timescale, _stts, _stsc, _stsz, _stco, null, null, segmentDurations);
  }
  return {
    videoSegments,
    audioSegments
  };
}
function getSegments(segDuration, timescale, stts, stsc, stsz, stco, stss, ctts, segmentDurations) {
  var frames = [];
  var gop = [];
  var gopDuration = [];
  var stscEntries = stsc.entries;
  var stcoEntries = stco.entries;
  var stszEntrySizes = stsz.entrySizes;
  var stssEntries = stss === null || stss === void 0 ? void 0 : stss.entries;
  var cttsEntries = ctts === null || ctts === void 0 ? void 0 : ctts.entries;
  var cttsArr;
  if (cttsEntries) {
    cttsArr = [];
    cttsEntries.forEach(function(_ref) {
      var count = _ref.count, offset = _ref.offset;
      for (var i2 = 0; i2 < count; i2++) {
        cttsArr.push(offset);
      }
    });
  }
  var keyframeMap;
  if (stssEntries) {
    keyframeMap = {};
    stssEntries.forEach(function(x) {
      keyframeMap[x - 1] = true;
    });
  }
  var frame;
  var duration;
  var startTime = 0;
  var pos = 0;
  var chunkIndex = 0;
  var chunkRunIndex = 0;
  var offsetInChunk = 0;
  var lastSampleInChunk = stscEntries[0].samplesPerChunk;
  var lastChunkInRun = stscEntries[1] ? stscEntries[1].firstChunk - 1 : Infinity;
  var dts = 0;
  var gopId = -1;
  stts.entries.forEach(function(_ref2) {
    var count = _ref2.count, delta = _ref2.delta;
    duration = delta;
    for (var i2 = 0; i2 < count; i2++) {
      frame = {
        dts,
        startTime,
        duration,
        size: stszEntrySizes[pos] || stsz.sampleSize,
        offset: stcoEntries[chunkIndex] + offsetInChunk,
        index: pos
      };
      if (stssEntries) {
        frame.keyframe = keyframeMap[pos];
        if (frame.keyframe) {
          gopId++;
          gop.push([frame]);
          gopDuration.push(frame.duration);
        } else {
          gop[gop.length - 1].push(frame);
          gopDuration[gop.length - 1] += frame.duration;
        }
        frame.gopId = gopId;
      }
      if (cttsArr && pos < cttsArr.length) {
        frame.pts = dts + cttsArr[pos];
      }
      if (pos === 0) {
        frame.pts = 0;
      }
      frames.push(frame);
      startTime += duration;
      dts += delta;
      pos++;
      if (pos < lastSampleInChunk) {
        offsetInChunk += frame.size;
      } else {
        chunkIndex++;
        offsetInChunk = 0;
        if (chunkIndex >= lastChunkInRun) {
          chunkRunIndex++;
          lastChunkInRun = stscEntries[chunkRunIndex + 1] ? stscEntries[chunkRunIndex + 1].firstChunk - 1 : Infinity;
        }
        lastSampleInChunk += stscEntries[chunkRunIndex].samplesPerChunk;
      }
    }
  });
  var l = frames.length;
  if (!l || stss && !frames[0].keyframe)
    return;
  var segments = [];
  var segFrames = [];
  var time = 0;
  var lastFrame;
  var adjust = 0;
  var pushSegment = function pushSegment2(duration2) {
    var _segments;
    lastFrame = segFrames[segFrames.length - 1];
    segments.push({
      index: segments.length,
      startTime: ((_segments = segments[segments.length - 1]) === null || _segments === void 0 ? void 0 : _segments.endTime) || segFrames[0].startTime / timescale,
      endTime: (lastFrame.startTime + lastFrame.duration) / timescale,
      duration: duration2,
      range: [segFrames[0].offset, lastFrame.offset + lastFrame.size],
      frames: segFrames
    });
    time = 0;
    segFrames = [];
  };
  if (stss) {
    var _duration = segDuration * timescale;
    for (var i = 0, _l = gop.length; i < _l; i++) {
      var _segFrames;
      time += gopDuration[i];
      (_segFrames = segFrames).push.apply(_segFrames, _toConsumableArray(gop[i]));
      if (i + 1 < _l) {
        if (i === 0 || time > _duration) {
          pushSegment(time / timescale);
        }
      } else {
        pushSegment(time / timescale);
      }
    }
  } else {
    segmentDurations = segmentDurations || [];
    var _duration2 = segmentDurations[0] || segDuration;
    for (var _i = 0; _i < l; _i++) {
      segFrames.push(frames[_i]);
      time += frames[_i].duration;
      var curTime = time / timescale;
      if (_i + 1 >= l || curTime + adjust >= _duration2) {
        adjust += curTime - _duration2;
        pushSegment(curTime);
        _duration2 = segmentDurations[segments.length] || segDuration;
      }
    }
  }
  return segments;
}
function moovToMeta(moov) {
  var videoCodec = "";
  var audioCodec = "";
  var width = 0;
  var height = 0;
  var audioChannelCount = 0;
  var audioSampleRate = 0;
  var duration = 0;
  var videoTimescale = 0;
  var audioTimescale = 0;
  if (moov.mvhd) {
    duration = moov.mvhd.duration / moov.mvhd.timescale;
  }
  var tracks = moov.trak;
  if (tracks) {
    var videoTrack = tracks.find(function(t) {
      var _t$mdia3, _t$mdia3$hdlr;
      return ((_t$mdia3 = t.mdia) === null || _t$mdia3 === void 0 ? void 0 : (_t$mdia3$hdlr = _t$mdia3.hdlr) === null || _t$mdia3$hdlr === void 0 ? void 0 : _t$mdia3$hdlr.handlerType) === "vide";
    });
    var audioTrack = tracks.find(function(t) {
      var _t$mdia4, _t$mdia4$hdlr;
      return ((_t$mdia4 = t.mdia) === null || _t$mdia4 === void 0 ? void 0 : (_t$mdia4$hdlr = _t$mdia4.hdlr) === null || _t$mdia4$hdlr === void 0 ? void 0 : _t$mdia4$hdlr.handlerType) === "soun";
    });
    var e1 = null;
    var defaultKID;
    if (videoTrack) {
      var _videoTrack$mdia2, _videoTrack$mdia2$min, _videoTrack$mdia2$min2;
      e1 = (_videoTrack$mdia2 = videoTrack.mdia) === null || _videoTrack$mdia2 === void 0 ? void 0 : (_videoTrack$mdia2$min = _videoTrack$mdia2.minf) === null || _videoTrack$mdia2$min === void 0 ? void 0 : (_videoTrack$mdia2$min2 = _videoTrack$mdia2$min.stbl) === null || _videoTrack$mdia2$min2 === void 0 ? void 0 : _videoTrack$mdia2$min2.stsd.entries[0];
      if (e1) {
        var _videoTrack$mdia3, _videoTrack$mdia3$mdh, _ref3;
        width = e1.width;
        height = e1.height;
        videoTimescale = (_videoTrack$mdia3 = videoTrack.mdia) === null || _videoTrack$mdia3 === void 0 ? void 0 : (_videoTrack$mdia3$mdh = _videoTrack$mdia3.mdhd) === null || _videoTrack$mdia3$mdh === void 0 ? void 0 : _videoTrack$mdia3$mdh.timescale;
        videoCodec = (_ref3 = e1.avcC || e1.hvcC) === null || _ref3 === void 0 ? void 0 : _ref3.codec;
        if (e1.type === "encv") {
          var _e1$sinf, _e1$sinf$schi;
          defaultKID = (_e1$sinf = e1.sinf) === null || _e1$sinf === void 0 ? void 0 : (_e1$sinf$schi = _e1$sinf.schi) === null || _e1$sinf$schi === void 0 ? void 0 : _e1$sinf$schi.tenc.default_KID;
        }
      }
    }
    if (audioTrack) {
      var _audioTrack$mdia2, _audioTrack$mdia2$min, _audioTrack$mdia2$min2;
      e1 = (_audioTrack$mdia2 = audioTrack.mdia) === null || _audioTrack$mdia2 === void 0 ? void 0 : (_audioTrack$mdia2$min = _audioTrack$mdia2.minf) === null || _audioTrack$mdia2$min === void 0 ? void 0 : (_audioTrack$mdia2$min2 = _audioTrack$mdia2$min.stbl) === null || _audioTrack$mdia2$min2 === void 0 ? void 0 : _audioTrack$mdia2$min2.stsd.entries[0];
      if (e1) {
        var _e1$esds, _audioTrack$mdia3, _audioTrack$mdia3$mdh;
        audioChannelCount = e1.channelCount;
        audioSampleRate = e1.sampleRate;
        audioCodec = (_e1$esds = e1.esds) === null || _e1$esds === void 0 ? void 0 : _e1$esds.codec;
        audioTimescale = (_audioTrack$mdia3 = audioTrack.mdia) === null || _audioTrack$mdia3 === void 0 ? void 0 : (_audioTrack$mdia3$mdh = _audioTrack$mdia3.mdhd) === null || _audioTrack$mdia3$mdh === void 0 ? void 0 : _audioTrack$mdia3$mdh.timescale;
        if (e1.type === "enca") {
          var _e1$sinf2, _e1$sinf2$schi;
          defaultKID = defaultKID || ((_e1$sinf2 = e1.sinf) === null || _e1$sinf2 === void 0 ? void 0 : (_e1$sinf2$schi = _e1$sinf2.schi) === null || _e1$sinf2$schi === void 0 ? void 0 : _e1$sinf2$schi.tenc.default_KID);
        }
      }
    }
    return {
      kid: defaultKID ? defaultKID.join("") : null,
      videoCodec,
      audioCodec,
      width,
      height,
      videoTimescale,
      audioChannelCount,
      audioSampleRate,
      duration,
      audioTimescale,
      moov
    };
  }
}
function isNumber(n) {
  return typeof n === "number" && !Number.isNaN(n);
}
export { isNumber, moovToMeta, moovToSegments };
