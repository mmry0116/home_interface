import { defineProperty as _defineProperty, typeof as _typeof, inherits as _inherits, createSuper as _createSuper, createClass as _createClass, classCallCheck as _classCallCheck, assertThisInitialized as _assertThisInitialized, objectSpread2 as _objectSpread2 } from "./_virtual/_rollupPluginBabelHelpers.js";
import { BasePlugin, Events, Errors } from "xgplayer";
import { MSE, EVENT } from "xgplayer-streaming-shared";
import { Hls } from "./hls/index.js";
import { Event } from "./hls/constants.js";
import PluginExtension from "./plugin-extension.js";
function parseSwitchUrlArgs(args, plugin) {
  var player = plugin.player;
  var curTime = player.currentTime;
  var options = {
    startTime: curTime
  };
  switch (_typeof(args)) {
    case "boolean":
      options.seamless = args;
      break;
    case "object":
      Object.assign(options, args);
      break;
  }
  return options;
}
var HlsPlugin = /* @__PURE__ */ function(_BasePlugin) {
  _inherits(HlsPlugin2, _BasePlugin);
  var _super = _createSuper(HlsPlugin2);
  function HlsPlugin2() {
    var _this;
    _classCallCheck(this, HlsPlugin2);
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(_args));
    _defineProperty(_assertThisInitialized(_this), "hls", null);
    _defineProperty(_assertThisInitialized(_this), "pluginExtension", null);
    _defineProperty(_assertThisInitialized(_this), "getStats", function() {
      var _this$hls;
      return (_this$hls = _this.hls) === null || _this$hls === void 0 ? void 0 : _this$hls.getStats();
    });
    _defineProperty(_assertThisInitialized(_this), "_onSwitchSubtitle", function(_ref) {
      var _this$hls2;
      var lang = _ref.lang;
      (_this$hls2 = _this.hls) === null || _this$hls2 === void 0 ? void 0 : _this$hls2.switchSubtitleStream(lang);
    });
    _defineProperty(_assertThisInitialized(_this), "_onSwitchURL", function(url, args) {
      return new Promise(function(resolve, reject) {
        var _assertThisInitialize = _assertThisInitialized(_this), player = _assertThisInitialize.player, hls = _assertThisInitialize.hls;
        if (hls) {
          var _this$player$config, _this$player$config$h;
          var options = parseSwitchUrlArgs(args, _assertThisInitialized(_this));
          player.config.url = url;
          hls.switchURL(url, options).then(function() {
            return resolve(true);
          }).catch(reject);
          if (!options.seamless && (_this$player$config = _this.player.config) !== null && _this$player$config !== void 0 && (_this$player$config$h = _this$player$config.hls) !== null && _this$player$config$h !== void 0 && _this$player$config$h.keepStatusAfterSwitch) {
            _this._keepPauseStatus();
          }
        } else {
          reject();
        }
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_keepPauseStatus", function() {
      var paused = _this.player.paused;
      if (!paused)
        return;
      _this.player.once("canplay", function() {
        _this.player.pause();
      });
    });
    return _this;
  }
  _createClass(HlsPlugin2, [{
    key: "core",
    get: function get() {
      return this.hls;
    }
  }, {
    key: "version",
    get: function get() {
      var _this$hls3;
      return (_this$hls3 = this.hls) === null || _this$hls3 === void 0 ? void 0 : _this$hls3.version;
    }
  }, {
    key: "softDecode",
    get: function get() {
      var _this$player, _this$player$config2;
      var mediaType = (_this$player = this.player) === null || _this$player === void 0 ? void 0 : (_this$player$config2 = _this$player.config) === null || _this$player$config2 === void 0 ? void 0 : _this$player$config2.mediaType;
      return !!mediaType && mediaType !== "video" && mediaType !== "audio";
    }
  }, {
    key: "beforePlayerInit",
    value: function beforePlayerInit() {
      var _this2 = this;
      var config = this.player.config;
      var hlsOpts = config.hls || {};
      if (!config.url && !config.__allowHlsEmptyUrl__ || !hlsOpts.preferMMS && MSE.isMMSOnly()) {
        return;
      }
      if (this.hls)
        this.hls.destroy();
      this.player.switchURL = this._onSwitchURL;
      this.player.handleSource = false;
      hlsOpts.innerDegrade = hlsOpts.innerDegrade || config.innerDegrade;
      if (hlsOpts.disconnectTime === null || hlsOpts.disconnectTime === void 0)
        hlsOpts.disconnectTime = 0;
      this.hls = new Hls(_objectSpread2({
        softDecode: this.softDecode,
        isLive: config.isLive,
        media: this.player.media || this.player.video,
        startTime: config.startTime,
        url: config.url
      }, hlsOpts));
      if (!this.softDecode) {
        BasePlugin.defineGetterOrSetter(this.player, {
          url: {
            get: function get() {
              var _this2$hls, _this2$hls$media;
              return (_this2$hls = _this2.hls) === null || _this2$hls === void 0 ? void 0 : (_this2$hls$media = _this2$hls.media) === null || _this2$hls$media === void 0 ? void 0 : _this2$hls$media.src;
            },
            configurable: true
          }
        });
      }
      if (this.softDecode) {
        this.pluginExtension = new PluginExtension(_objectSpread2({
          isLive: config.isLive,
          media: this.player.video
        }, hlsOpts), this);
        this.player.forceDegradeToVideo = function() {
          var _this2$pluginExtensio;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return (_this2$pluginExtensio = _this2.pluginExtension) === null || _this2$pluginExtensio === void 0 ? void 0 : _this2$pluginExtensio.forceDegradeToVideo.apply(_this2$pluginExtensio, args);
        };
      }
      if (config.isLive) {
        var _this$player2;
        (_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.useHooks("replay", function() {
          var _this2$hls2;
          return (_this2$hls2 = _this2.hls) === null || _this2$hls2 === void 0 ? void 0 : _this2$hls2.replay();
        });
      }
      this.on(Events.SWITCH_SUBTITLE || "switch_subtitle", this._onSwitchSubtitle);
      this.on(Events.URL_CHANGE, this._onSwitchURL);
      this.on(Events.DESTROY, this.destroy.bind(this));
      this._transError();
      this._transCoreEvent(EVENT.TTFB);
      this._transCoreEvent(EVENT.LOAD_START);
      this._transCoreEvent(EVENT.LOAD_RESPONSE_HEADERS);
      this._transCoreEvent(EVENT.LOAD_COMPLETE);
      this._transCoreEvent(EVENT.LOAD_RETRY);
      this._transCoreEvent(EVENT.SOURCEBUFFER_CREATED);
      this._transCoreEvent(EVENT.MEDIASOURCE_OPENED);
      this._transCoreEvent(EVENT.REMOVE_BUFFER);
      this._transCoreEvent(EVENT.BUFFEREOS);
      this._transCoreEvent(EVENT.KEYFRAME);
      this._transCoreEvent(EVENT.METADATA_PARSED);
      this._transCoreEvent(EVENT.DEMUXED_TRACK);
      this._transCoreEvent(EVENT.SEI);
      this._transCoreEvent(EVENT.SEI_IN_TIME);
      this._transCoreEvent(EVENT.SPEED);
      this._transCoreEvent(EVENT.HLS_MANIFEST_LOADED);
      this._transCoreEvent(EVENT.HLS_LEVEL_LOADED);
      this._transCoreEvent(EVENT.STREAM_EXCEPTION);
      this._transCoreEvent(EVENT.SWITCH_URL_SUCCESS);
      this._transCoreEvent(EVENT.SWITCH_URL_FAILED);
      this._transCoreEvent(Event.NO_AUDIO_TRACK);
      this._transCoreEvent(Event.STREAM_PARSED);
      this._transCoreEvent(Event.SUBTITLE_SEGMENTS);
      this._transCoreEvent(Event.SUBTITLE_PLAYLIST);
      this._transCoreEvent(Event.APPEND_COST);
      if (config.url) {
        this.hls.load(config.url, true).catch(function(e) {
        });
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$pluginExtension;
      if (this.hls) {
        this.hls.destroy();
        this.hls = null;
      }
      (_this$pluginExtension = this.pluginExtension) === null || _this$pluginExtension === void 0 ? void 0 : _this$pluginExtension.destroy();
      this.pluginExtension = null;
    }
  }, {
    key: "_transError",
    value: function _transError() {
      var _this3 = this;
      this.hls.on(Event.ERROR, function(err) {
        if (_this3.player) {
          _this3.player.emit(Events.ERROR, new Errors(_this3.player, err));
        }
      });
    }
  }, {
    key: "_transCoreEvent",
    value: function _transCoreEvent(eventName) {
      var _this4 = this;
      this.hls.on(eventName, function(e) {
        if (_this4.player) {
          _this4.player.emit("core_event", _objectSpread2(_objectSpread2({}, e), {}, {
            eventName
          }));
          if (eventName === EVENT.SEI_IN_TIME && _this4.hls.hasSubtitle) {
            _this4._emitSeiPaylodTime(e);
          }
        }
      });
    }
  }, {
    key: "_emitSeiPaylodTime",
    value: function _emitSeiPaylodTime(e) {
      try {
        var seiJson = JSON.parse(Array.from(e.data.payload).map(function(x) {
          return String.fromCharCode(x);
        }).join("").slice(0, -1));
        if (!seiJson["rtmp_dts"])
          return;
        this.player.emit("core_event", {
          eventName: Event.SEI_PAYLOAD_TIME,
          time: seiJson["rtmp_dts"]
        });
      } catch (e2) {
      }
    }
  }], [{
    key: "pluginName",
    get: function get() {
      return "hls";
    }
  }, {
    key: "isSupported",
    value: function isSupported(mediaType, codec) {
      return Hls.isSupported(mediaType, codec);
    }
  }]);
  return HlsPlugin2;
}(BasePlugin);
_defineProperty(HlsPlugin, "Hls", Hls);
_defineProperty(HlsPlugin, "EVENT", Event);
export { HlsPlugin, parseSwitchUrlArgs };
