import { createClass as _createClass, classCallCheck as _classCallCheck, asyncToGenerator as _asyncToGenerator, regeneratorRuntime as _regeneratorRuntime } from "../../../_virtual/_rollupPluginBabelHelpers.js";
import { concatUint8Array } from "xgplayer-streaming-shared";
var Decryptor = /* @__PURE__ */ function() {
  function Decryptor2() {
    _classCallCheck(this, Decryptor2);
    var crypto = window.crypto || window.msCrypto;
    this.subtle = crypto && (crypto.subtle || crypto.webkitSubtle);
    this.externalDecryptor = null;
  }
  _createClass(Decryptor2, [{
    key: "destroy",
    value: function destroy() {
      var _this$externalDecrypt;
      if ((_this$externalDecrypt = this.externalDecryptor) !== null && _this$externalDecrypt !== void 0 && _this$externalDecrypt.destroy) {
        this.externalDecryptor.destroy();
      }
    }
  }, {
    key: "decrypt",
    value: function decrypt(video, audio) {
      if (!video && !audio)
        return;
      var ret = [];
      if (video) {
        ret[0] = this._decryptSegment(video);
      }
      if (audio) {
        ret[1] = this._decryptSegment(audio);
      }
      return Promise.all(ret);
    }
  }, {
    key: "_decryptSegment",
    value: function() {
      var _decryptSegment2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(seg) {
        var data;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1)
            switch (_context2.prev = _context2.next) {
              case 0:
                data = seg.data;
                if (!seg.key) {
                  _context2.next = 5;
                  break;
                }
                _context2.next = 4;
                return this._decryptData(seg.data, seg.key, seg.keyIv);
              case 4:
                data = _context2.sent;
              case 5:
                if (seg.map) {
                  _context2.next = 7;
                  break;
                }
                return _context2.abrupt("return", data);
              case 7:
                return _context2.abrupt("return", concatUint8Array(seg.map, data));
              case 8:
              case "end":
                return _context2.stop();
            }
        }, _callee2, this);
      }));
      function _decryptSegment(_x4) {
        return _decryptSegment2.apply(this, arguments);
      }
      return _decryptSegment;
    }()
  }, {
    key: "_decryptData",
    value: function() {
      var _decryptData2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(data, key, iv) {
        var aesKey;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1)
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this.externalDecryptor) {
                  _context3.next = 6;
                  break;
                }
                _context3.next = 3;
                return this.externalDecryptor.decrypt(data, key, iv);
              case 3:
                return _context3.abrupt("return", _context3.sent);
              case 6:
                if (this.subtle) {
                  _context3.next = 8;
                  break;
                }
                throw new Error("crypto is not defined");
              case 8:
                _context3.next = 10;
                return this.subtle.importKey("raw", key, {
                  name: "AES-CBC"
                }, false, ["encrypt", "decrypt"]);
              case 10:
                aesKey = _context3.sent;
                _context3.t0 = Uint8Array;
                _context3.next = 14;
                return this.subtle.decrypt({
                  name: "AES-CBC",
                  iv
                }, aesKey, data);
              case 14:
                _context3.t1 = _context3.sent;
                return _context3.abrupt("return", new _context3.t0(_context3.t1));
              case 16:
              case "end":
                return _context3.stop();
            }
        }, _callee3, this);
      }));
      function _decryptData(_x5, _x6, _x7) {
        return _decryptData2.apply(this, arguments);
      }
      return _decryptData;
    }()
  }]);
  return Decryptor2;
}();
export { Decryptor };
