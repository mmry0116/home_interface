import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty } from "../../_virtual/_rollupPluginBabelHelpers.js";
import { clamp } from "../utils.js";
import { Stream } from "./stream.js";
import { Event } from "../constants.js";
var Playlist = /* @__PURE__ */ function() {
  function Playlist2(hls) {
    _classCallCheck(this, Playlist2);
    _defineProperty(this, "streams", []);
    _defineProperty(this, "currentStream", null);
    _defineProperty(this, "dvrWindow", 0);
    _defineProperty(this, "_segmentPointer", -1);
    this.hls = hls;
  }
  _createClass(Playlist2, [{
    key: "lowLatency",
    get: function get() {
      var _this$currentStream;
      return (_this$currentStream = this.currentStream) === null || _this$currentStream === void 0 ? void 0 : _this$currentStream.lowLatency;
    }
  }, {
    key: "lastSegment",
    get: function get() {
      var _this$currentStream2;
      return (_this$currentStream2 = this.currentStream) === null || _this$currentStream2 === void 0 ? void 0 : _this$currentStream2.lastSegment;
    }
  }, {
    key: "currentSegment",
    get: function get() {
      var _this$currentSegments;
      return (_this$currentSegments = this.currentSegments) === null || _this$currentSegments === void 0 ? void 0 : _this$currentSegments[this._segmentPointer];
    }
  }, {
    key: "nextSegment",
    get: function get() {
      var _this$currentSegments2;
      return (_this$currentSegments2 = this.currentSegments) === null || _this$currentSegments2 === void 0 ? void 0 : _this$currentSegments2[this._segmentPointer + 1];
    }
  }, {
    key: "currentSegments",
    get: function get() {
      var _this$currentStream3;
      return (_this$currentStream3 = this.currentStream) === null || _this$currentStream3 === void 0 ? void 0 : _this$currentStream3.segments;
    }
  }, {
    key: "currentSubtitleEndSn",
    get: function get() {
      var _this$currentStream4;
      return (_this$currentStream4 = this.currentStream) === null || _this$currentStream4 === void 0 ? void 0 : _this$currentStream4.currentSubtitleEndSn;
    }
  }, {
    key: "liveEdge",
    get: function get() {
      var _this$currentStream5;
      return (_this$currentStream5 = this.currentStream) === null || _this$currentStream5 === void 0 ? void 0 : _this$currentStream5.liveEdge;
    },
    set: function set(end) {
      if (this.currentStream) {
        this.currentStream.liveEdge = end;
      }
    }
  }, {
    key: "totalDuration",
    get: function get() {
      var _this$currentStream6;
      return ((_this$currentStream6 = this.currentStream) === null || _this$currentStream6 === void 0 ? void 0 : _this$currentStream6.totalDuration) || 0;
    }
  }, {
    key: "seekRange",
    get: function get() {
      var segments = this.currentSegments;
      if (!segments || !segments.length)
        return;
      return [segments[0].start, segments[segments.length - 1].end];
    }
  }, {
    key: "nbSegments",
    get: function get() {
      var _this$currentSegments3;
      return ((_this$currentSegments3 = this.currentSegments) === null || _this$currentSegments3 === void 0 ? void 0 : _this$currentSegments3.length) || 0;
    }
  }, {
    key: "isEmpty",
    get: function get() {
      var _this$currentSegments4;
      return !((_this$currentSegments4 = this.currentSegments) !== null && _this$currentSegments4 !== void 0 && _this$currentSegments4.length);
    }
  }, {
    key: "isLive",
    get: function get() {
      var _this$currentStream7;
      return (_this$currentStream7 = this.currentStream) === null || _this$currentStream7 === void 0 ? void 0 : _this$currentStream7.live;
    }
  }, {
    key: "hadSegmentLoaded",
    get: function get() {
      return this._segmentPointer !== -1;
    }
  }, {
    key: "hasSubtitle",
    get: function get() {
      var _this$currentStream8;
      return !!((_this$currentStream8 = this.currentStream) !== null && _this$currentStream8 !== void 0 && _this$currentStream8.currentSubtitleStream);
    }
  }, {
    key: "getAudioSegment",
    value: function getAudioSegment(seg) {
      var _this$currentStream9;
      return (_this$currentStream9 = this.currentStream) === null || _this$currentStream9 === void 0 ? void 0 : _this$currentStream9.getAudioSegment(seg);
    }
  }, {
    key: "moveSegmentPointer",
    value: function moveSegmentPointer(pos) {
      var _this$currentSegments5;
      if (pos === null || pos === void 0)
        pos = this._segmentPointer + 1;
      this._segmentPointer = clamp(pos, -1, (_this$currentSegments5 = this.currentSegments) === null || _this$currentSegments5 === void 0 ? void 0 : _this$currentSegments5.length);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.streams = [];
      this.currentStream = null;
      this.dvrWindow = 0;
      this._segmentPointer = -1;
    }
  }, {
    key: "getSegmentByIndex",
    value: function getSegmentByIndex(index) {
      var _this$currentSegments6;
      return (_this$currentSegments6 = this.currentSegments) === null || _this$currentSegments6 === void 0 ? void 0 : _this$currentSegments6[index];
    }
  }, {
    key: "setNextSegmentByIndex",
    value: function setNextSegmentByIndex() {
      var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      this._segmentPointer = index - 1;
    }
  }, {
    key: "setNextSegmentBySN",
    value: function setNextSegmentBySN() {
      var _this$currentSegments7;
      var sn = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var preIndex = (_this$currentSegments7 = this.currentSegments) === null || _this$currentSegments7 === void 0 ? void 0 : _this$currentSegments7.findIndex(function(x) {
        return x.sn === sn;
      });
      if (preIndex !== -1) {
        this.setNextSegmentByIndex(preIndex + 1);
      }
      return preIndex;
    }
  }, {
    key: "findSegmentIndexByTime",
    value: function findSegmentIndexByTime(time) {
      var segments = this.currentSegments;
      if (segments) {
        for (var i = 0, l = segments.length, seg; i < l; i++) {
          seg = segments[i];
          if (time >= seg.start && time < seg.end) {
            return i;
          }
        }
        var lastSegment = segments[segments.length - 1];
        if (Math.abs(time - (lastSegment === null || lastSegment === void 0 ? void 0 : lastSegment.end)) < 0.2)
          return segments.length - 1;
      }
    }
  }, {
    key: "upsertPlaylist",
    value: function upsertPlaylist(playlist, audioPlaylist, subtitlePlaylist) {
      var _this = this;
      if (!playlist)
        return;
      if (playlist.isMaster) {
        this.streams.length = playlist.streams.length;
        playlist.streams.filter(function(x) {
          return x.url;
        }).forEach(function(stream2, i) {
          if (_this.streams[i]) {
            _this.streams[i].update(stream2);
          } else {
            _this.streams[i] = new Stream(stream2);
          }
        });
        this.currentStream = this.streams[0];
      } else if (Array.isArray(playlist.segments)) {
        var stream = this.currentStream;
        if (stream) {
          stream.update(playlist, audioPlaylist, subtitlePlaylist);
          var newSubtitleSegs = stream.updateSubtitle(subtitlePlaylist);
          if (newSubtitleSegs) {
            this.hls.emit(Event.SUBTITLE_SEGMENTS, {
              list: newSubtitleSegs
            });
          }
        } else {
          this.reset();
          this.currentStream = this.streams[0] = new Stream(playlist, audioPlaylist, subtitlePlaylist);
        }
      }
      var currentStream = this.currentStream;
      if (currentStream) {
        if (this.hls.isLive && !this.dvrWindow) {
          this.dvrWindow = this.currentSegments.reduce(function(a, c) {
            a += c.duration;
            return a;
          }, 0);
        }
      }
    }
  }, {
    key: "updateSegmentsRanges",
    value: function updateSegmentsRanges(sn, start) {
      var _this$currentSegments8;
      var segs = (_this$currentSegments8 = this.currentSegments) === null || _this$currentSegments8 === void 0 ? void 0 : _this$currentSegments8.filter(function(x) {
        return x.sn >= sn;
      });
      segs.forEach(function(s) {
        s.start = start;
        start = s.end;
      });
    }
  }, {
    key: "switchSubtitle",
    value: function switchSubtitle(lang) {
      var _this$currentStream10;
      (_this$currentStream10 = this.currentStream) === null || _this$currentStream10 === void 0 ? void 0 : _this$currentStream10.switchSubtitle(lang);
    }
  }, {
    key: "clearOldSegment",
    value: function clearOldSegment() {
      var maxPlaylistSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50;
      var stream = this.currentStream;
      if (!this.dvrWindow || !stream)
        return;
      var startTime = stream.endTime - this.dvrWindow;
      if (startTime <= 0)
        return;
      var segments = stream.segments;
      if (segments.length <= maxPlaylistSize)
        return;
      this._segmentPointer = stream.clearOldSegment(startTime, this._segmentPointer);
    }
  }, {
    key: "checkSegmentTrackChange",
    value: function checkSegmentTrackChange(cTime, nbSb) {
      var index = this.findSegmentIndexByTime(cTime);
      var seg = this.getSegmentByIndex(index);
      if (!seg)
        return;
      if (!seg.hasAudio && !seg.hasVideo)
        return;
      if (nbSb !== 2 && seg.hasAudio && seg.hasVideo)
        return seg;
      if (seg.end - cTime > 0.3)
        return;
      var next = this.getSegmentByIndex(index + 1);
      if (!next)
        return;
      if (!next.hasAudio && !next.hasVideo)
        return;
      if (next.hasAudio !== seg.hasAudio || next.hasVideo !== seg.hasVideo)
        return next;
    }
  }, {
    key: "feedbackLiveEdge",
    value: function feedbackLiveEdge(segment, bufferEnd) {
      var _this$lastSegment;
      var segs = this.currentSegments;
      if (!segs)
        return;
      var isLast = ((_this$lastSegment = this.lastSegment) === null || _this$lastSegment === void 0 ? void 0 : _this$lastSegment.sn) === segment.sn;
      if (isLast) {
        this.liveEdge = bufferEnd;
        return;
      }
      this.updateSegmentsRanges(segment.sn + 1, bufferEnd);
    }
  }]);
  return Playlist2;
}();
export { Playlist };
