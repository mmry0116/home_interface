export class Stream {
    constructor(playlist: any, audioPlaylist: any, subtitlePlaylist: any);
    live: any;
    id: number;
    bitrate: number;
    width: number;
    height: number;
    name: string;
    url: string;
    audioCodec: string;
    videoCodec: string;
    textCodec: string;
    startCC: number;
    endCC: number;
    startSN: number;
    endSN: number;
    totalDuration: number;
    targetDuration: number;
    partTargetDuration: number;
    canSkipUntil: number;
    canSkipDateRanges: boolean;
    skippedSegments: number;
    canBlockReload: boolean;
    partHoldBack: number;
    lowLatency: boolean;
    endPartIndex: number;
    snDiff: any;
    segments: any[];
    /** @type {import('../../parser/model').AudioStream[]} */
    audioStreams: any[];
    /** @type {import('../../parser/model').SubTitleStream[]} */
    subtitleStreams: any[];
    /** @type {import('../../parser/model').ClosedCaptionsStream[]} */
    closedCaptions: any[];
    /** @type {import('../../parser/model').AudioStream | null} */
    currentAudioStream: any | null;
    /** @type {import('../../parser/model').subtitleStreams | null} */
    currentSubtitleStream: any | null;
    /**
     * asdasd {@link AudioStream}
     */
    get lastSegment(): any;
    get segmentDuration(): any;
    set liveEdge(arg: any);
    get liveEdge(): any;
    set endTime(arg: any);
    get endTime(): any;
    get currentSubtitleEndSn(): any;
    clearOldSegment(startTime: any, pointer: any): number;
    getAudioSegment(seg: any): any;
    update(playlist: any, audioPlaylist: any): void;
    updateSubtitle(subtitlePlaylist: any): any;
    switchSubtitle(lang: any): void;
    _setLLPlaybackPoint(playlist: any): any;
    _clearSegments(startTime: any, pointer: any): number;
    _updateSegments(playlist: any, segObj: any): any;
}
