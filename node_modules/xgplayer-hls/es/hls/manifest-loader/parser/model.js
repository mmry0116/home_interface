import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty, inherits as _inherits, createSuper as _createSuper, assertThisInitialized as _assertThisInitialized } from "../../../_virtual/_rollupPluginBabelHelpers.js";
var MasterPlaylist = /* @__PURE__ */ _createClass(function MasterPlaylist2() {
  _classCallCheck(this, MasterPlaylist2);
  _defineProperty(this, "version", 0);
  _defineProperty(this, "streams", []);
  _defineProperty(this, "isMaster", true);
});
var MediaType = {
  Audio: "AUDIO",
  Video: "VIDEO",
  SubTitle: "SUBTITLE",
  ClosedCaptions: "CLOSED-CAPTIONS"
};
var KeySystems = {
  CLEAR_KEY: "org.w3.clearkey",
  FAIRPLAY: "com.apple.streamingkeydelivery",
  WIDEVINE: "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed",
  PLAYREADY: "com.microsoft.playready"
};
var MediaStream = /* @__PURE__ */ _createClass(function MediaStream2() {
  _classCallCheck(this, MediaStream2);
  _defineProperty(this, "id", 0);
  _defineProperty(this, "url", "");
  _defineProperty(this, "default", false);
  _defineProperty(this, "autoSelect", false);
  _defineProperty(this, "forced", false);
  _defineProperty(this, "group", "");
  _defineProperty(this, "name", "");
  _defineProperty(this, "lang", "");
  _defineProperty(this, "segments", []);
  _defineProperty(this, "endSN", 0);
});
var AudioStream = /* @__PURE__ */ function(_MediaStream) {
  _inherits(AudioStream2, _MediaStream);
  var _super = _createSuper(AudioStream2);
  function AudioStream2() {
    var _this;
    _classCallCheck(this, AudioStream2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "mediaType", MediaType.Audio);
    _defineProperty(_assertThisInitialized(_this), "channels", 0);
    return _this;
  }
  return _createClass(AudioStream2);
}(MediaStream);
var SubTitleStream = /* @__PURE__ */ function(_MediaStream3) {
  _inherits(SubTitleStream2, _MediaStream3);
  var _super3 = _createSuper(SubTitleStream2);
  function SubTitleStream2() {
    var _this3;
    _classCallCheck(this, SubTitleStream2);
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _this3 = _super3.call.apply(_super3, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this3), "mediaType", MediaType.SubTitle);
    return _this3;
  }
  return _createClass(SubTitleStream2);
}(MediaStream);
var MasterStream = /* @__PURE__ */ _createClass(function MasterStream2() {
  _classCallCheck(this, MasterStream2);
  _defineProperty(this, "id", 0);
  _defineProperty(this, "bitrate", 0);
  _defineProperty(this, "width", 0);
  _defineProperty(this, "height", 0);
  _defineProperty(this, "name", "");
  _defineProperty(this, "url", "");
  _defineProperty(this, "audioCodec", "");
  _defineProperty(this, "videoCodec", "");
  _defineProperty(this, "textCodec", "");
  _defineProperty(this, "audioGroup", "");
  _defineProperty(this, "audioStreams", []);
  _defineProperty(this, "subtitleStreams", []);
  _defineProperty(this, "closedCaptionsStream", []);
});
var MediaPlaylist = /* @__PURE__ */ _createClass(function MediaPlaylist2() {
  _classCallCheck(this, MediaPlaylist2);
  _defineProperty(this, "version", 0);
  _defineProperty(this, "url", "");
  _defineProperty(this, "type", "");
  _defineProperty(this, "startCC", 0);
  _defineProperty(this, "endCC", 0);
  _defineProperty(this, "startSN", 0);
  _defineProperty(this, "endSN", 0);
  _defineProperty(this, "totalDuration", 0);
  _defineProperty(this, "targetDuration", 0);
  _defineProperty(this, "partTargetDuration", 0);
  _defineProperty(this, "canSkipUntil", 0);
  _defineProperty(this, "canSkipDateRanges", false);
  _defineProperty(this, "skippedSegments", 0);
  _defineProperty(this, "canBlockReload", false);
  _defineProperty(this, "partHoldBack", 0);
  _defineProperty(this, "live", true);
  _defineProperty(this, "lowLatency", false);
  _defineProperty(this, "endPartIndex", 0);
  _defineProperty(this, "segments", []);
});
var MediaSegment = /* @__PURE__ */ function() {
  function MediaSegment2(parentUrl) {
    _classCallCheck(this, MediaSegment2);
    _defineProperty(this, "sn", 0);
    _defineProperty(this, "cc", 0);
    _defineProperty(this, "url", "");
    _defineProperty(this, "parentUrl", "");
    _defineProperty(this, "title", "");
    _defineProperty(this, "start", 0);
    _defineProperty(this, "duration", 0);
    _defineProperty(this, "dataTime", "");
    _defineProperty(this, "key", null);
    _defineProperty(this, "byteRange", null);
    _defineProperty(this, "isInitSegment", false);
    _defineProperty(this, "initSegment", null);
    _defineProperty(this, "isLast", false);
    _defineProperty(this, "hasAudio", false);
    _defineProperty(this, "hasVideo", false);
    _defineProperty(this, "independent", false);
    _defineProperty(this, "partIndex", 0);
    this.parentUrl = parentUrl;
  }
  _createClass(MediaSegment2, [{
    key: "end",
    get: function get() {
      return this.start + this.duration;
    }
  }, {
    key: "setTrackExist",
    value: function setTrackExist(v, a) {
      this.hasVideo = v;
      this.hasAudio = a;
    }
  }, {
    key: "setByteRange",
    value: function setByteRange(data, prevSegment) {
      this.byteRange = [0];
      var bytes = data.split("@");
      if (bytes.length === 1 && prevSegment && prevSegment.byteRange) {
        this.byteRange[0] = prevSegment.byteRange[1] || 0;
        if (this.byteRange[0])
          this.byteRange[0] += 1;
      } else {
        this.byteRange[0] = parseInt(bytes[1]);
      }
      this.byteRange[1] = this.byteRange[0] + parseInt(bytes[0]) - 1;
    }
  }]);
  return MediaSegment2;
}();
var MediaSegmentKey = /* @__PURE__ */ function() {
  function MediaSegmentKey2(segKey) {
    _classCallCheck(this, MediaSegmentKey2);
    _defineProperty(this, "method", "");
    _defineProperty(this, "url", "");
    _defineProperty(this, "iv", null);
    _defineProperty(this, "keyFormat", "");
    _defineProperty(this, "keyFormatVersions", "");
    if (segKey instanceof MediaSegmentKey2) {
      this.method = segKey.method;
      this.url = segKey.url;
      this.keyFormat = segKey.keyFormat;
      this.keyFormatVersions = segKey.keyFormatVersions;
      if (segKey.iv)
        this.iv = new Uint8Array(segKey.iv);
    }
  }
  _createClass(MediaSegmentKey2, [{
    key: "clone",
    value: function clone(sn) {
      var key = new MediaSegmentKey2(this);
      if (sn !== null && sn !== void 0)
        key.setIVFromSN(sn);
      return key;
    }
  }, {
    key: "setIVFromSN",
    value: function setIVFromSN(sn) {
      if (!this.iv && this.method === "AES-128" && typeof sn === "number" && this.url) {
        this.iv = new Uint8Array(16);
        for (var i = 12; i < 16; i++) {
          this.iv[i] = sn >> 8 * (15 - i) & 255;
        }
      }
    }
  }, {
    key: "isSegmentEncrypted",
    value: function isSegmentEncrypted() {
      var method = this.method;
      return method === "AES-128";
    }
  }, {
    key: "isValidKeySystem",
    value: function isValidKeySystem() {
      var isKeyFormatValid = [KeySystems.CLEAR_KEY, KeySystems.FAIRPLAY, KeySystems.WIDEVINE, KeySystems.PLAYREADY].indexOf(this.keyFormat) > -1;
      if (!isKeyFormatValid) {
        return false;
      }
      var isMethodValid = ["SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method) > -1;
      if (!isMethodValid) {
        return false;
      }
      return true;
    }
  }, {
    key: "isSupported",
    value: function isSupported() {
      if (!this.method) {
        return false;
      }
      if (this.isSegmentEncrypted()) {
        return true;
      } else if (this.isValidKeySystem()) {
        return true;
      }
      return false;
    }
  }]);
  return MediaSegmentKey2;
}();
export { AudioStream, MasterPlaylist, MasterStream, MediaPlaylist, MediaSegment, MediaSegmentKey, MediaStream, SubTitleStream };
