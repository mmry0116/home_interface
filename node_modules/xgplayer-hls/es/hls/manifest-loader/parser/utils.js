var REGEXP_TAG = /^#(EXT[^:]*)(?::(.*))?$/;
var REGEXP_ATTR = /([^=]+)=(?:"([^"]*)"|([^",]*))(?:,|$)/g;
var REGEXP_ABSOLUTE_URL = /^(?:[a-zA-Z0-9+\-.]+:)?\/\//;
var REGEXP_URL_PAIR = /^((?:[a-zA-Z0-9+\-.]+:)?\/\/[^/?#]*)?([^?#]*\/)?/;
function getLines(text) {
  return text.split(/[\r\n]/).map(function(x) {
    return x.trim();
  }).filter(Boolean);
}
function parseTag(text) {
  var ret = text.match(REGEXP_TAG);
  if (!ret || !ret[1])
    return;
  return [ret[1].replace("EXT-X-", ""), ret[2]];
}
function parseAttr(text) {
  var ret = {};
  var match = REGEXP_ATTR.exec(text);
  while (match) {
    ret[match[1]] = match[2] || match[3];
    match = REGEXP_ATTR.exec(text);
  }
  return ret;
}
function getAbsoluteUrl(url, parentUrl) {
  if (!parentUrl || !url || REGEXP_ABSOLUTE_URL.test(url))
    return url;
  var pairs = REGEXP_URL_PAIR.exec(parentUrl);
  if (!pairs)
    return url;
  if (url[0] === "/")
    return pairs[1] + url;
  return pairs[1] + pairs[2] + url;
}
var CODECS_REGEXP = {
  audio: [/^mp4a/, /^vorbis$/, /^opus$/, /^flac$/, /^[ae]c-3$/],
  video: [/^avc/, /^hev/, /^hvc/, /^vp0?[89]/, /^av1$/],
  text: [/^vtt$/, /^wvtt/, /^stpp/]
};
function getCodecs(type, codecs) {
  var re = CODECS_REGEXP[type];
  if (!re || !codecs || !codecs.length)
    return;
  for (var i = 0; i < re.length; i++) {
    for (var j = 0; j < codecs.length; j++) {
      if (re[i].test(codecs[j]))
        return codecs[j];
    }
  }
}
export { getAbsoluteUrl, getCodecs, getLines, parseAttr, parseTag };
