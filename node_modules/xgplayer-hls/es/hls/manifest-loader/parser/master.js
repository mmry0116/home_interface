import { slicedToArray as _slicedToArray } from "../../../_virtual/_rollupPluginBabelHelpers.js";
import { MasterPlaylist, MediaStream, SubTitleStream, AudioStream, MasterStream } from "./model.js";
import { parseTag, parseAttr, getAbsoluteUrl, getCodecs } from "./utils.js";
function parseMasterPlaylist(lines, parentUrl) {
  var master = new MasterPlaylist();
  var index = 0;
  var line;
  var audioStreams = [];
  var subtitleStreams = [];
  while (line = lines[index++]) {
    var tag = parseTag(line);
    if (!tag)
      continue;
    var _tag = _slicedToArray(tag, 2), name = _tag[0], data = _tag[1];
    if (name === "VERSION") {
      master.version = parseInt(data);
    } else if (name === "MEDIA" && data) {
      var attr = parseAttr(data);
      var stream = void 0;
      switch (attr.TYPE) {
        case "AUDIO":
          stream = new AudioStream();
          break;
        case "SUBTITLES":
          stream = new SubTitleStream();
          break;
        default:
          stream = new MediaStream();
      }
      stream.url = getAbsoluteUrl(attr.URI, parentUrl);
      stream.default = attr.DEFAULT === "YES";
      stream.autoSelect = attr.AUTOSELECT === "YES";
      stream.group = attr["GROUP-ID"];
      stream.name = attr.NAME;
      stream.lang = attr.LANGUAGE;
      if (attr.CHANNELS) {
        stream.channels = Number(attr.CHANNELS.split("/")[0]);
        if (Number.isNaN(stream.channels))
          stream.channels = 0;
      }
      if (attr.TYPE === "AUDIO" && attr.URI) {
        audioStreams.push(stream);
      }
      if (attr.TYPE === "SUBTITLES") {
        subtitleStreams.push(stream);
      }
    } else if (name === "STREAM-INF" && data) {
      var _stream = new MasterStream();
      var _attr = parseAttr(data);
      _stream.bitrate = parseInt(_attr["AVERAGE-BANDWIDTH"] || _attr.BANDWIDTH);
      _stream.name = _attr.NAME;
      _stream.url = getAbsoluteUrl(lines[index++], parentUrl);
      if (_attr.RESOLUTION) {
        var _attr$RESOLUTION$spli = _attr.RESOLUTION.split("x"), _attr$RESOLUTION$spli2 = _slicedToArray(_attr$RESOLUTION$spli, 2), w = _attr$RESOLUTION$spli2[0], h = _attr$RESOLUTION$spli2[1];
        _stream.width = parseInt(w);
        _stream.height = parseInt(h);
      }
      if (_attr.CODECS) {
        var codecs = _attr.CODECS.split(/[ ,]+/).filter(Boolean);
        _stream.videoCodec = getCodecs("video", codecs);
        _stream.audioCodec = getCodecs("audio", codecs);
        _stream.textCodec = getCodecs("text", codecs);
      }
      _stream.audioGroup = _attr.AUDIO;
      _stream.subtitleGroup = _attr.SUBTITLES;
      master.streams.push(_stream);
    }
  }
  master.streams.forEach(function(s, i) {
    s.id = i;
  });
  if (audioStreams.length) {
    audioStreams.forEach(function(s, i) {
      s.id = i;
    });
    master.streams.forEach(function(stream2) {
      if (stream2.audioGroup) {
        stream2.audioStreams = audioStreams.filter(function(x) {
          return x.group === stream2.audioGroup;
        });
      }
    });
  }
  if (subtitleStreams.length) {
    subtitleStreams.forEach(function(s, i) {
      s.id = i;
    });
    master.streams.forEach(function(stream2) {
      if (stream2.subtitleGroup) {
        stream2.subtitleStreams = subtitleStreams.filter(function(x) {
          return x.group === stream2.subtitleGroup;
        });
      }
    });
  }
  return master;
}
export { parseMasterPlaylist };
