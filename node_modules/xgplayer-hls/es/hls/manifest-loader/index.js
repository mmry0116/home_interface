import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty, objectSpread2 as _objectSpread2, asyncToGenerator as _asyncToGenerator, regeneratorRuntime as _regeneratorRuntime, slicedToArray as _slicedToArray } from "../../_virtual/_rollupPluginBabelHelpers.js";
import { StreamingError, ERR, EVENT, NetLoader } from "xgplayer-streaming-shared";
import { M3U8Parser } from "./parser/index.js";
import { Event } from "../constants.js";
var ManifestLoader = /* @__PURE__ */ function() {
  function ManifestLoader2(hls) {
    var _this = this;
    _classCallCheck(this, ManifestLoader2);
    _defineProperty(this, "_emitOnLoaded", function(res, url) {
      var response = res.response, options = res.options;
      var _ref = options || {}, firstByteTime = _ref.firstByteTime, startTime = _ref.startTime, endTime = _ref.endTime, contentLength = _ref.contentLength;
      var time = endTime - startTime;
      _this.hls.emit(EVENT.SPEED, {
        time,
        byteLength: contentLength,
        url
      });
      _this.hls.emit(EVENT.LOAD_COMPLETE, {
        url,
        elapsed: time || 0
      });
      _this.hls.emit(EVENT.TTFB, {
        url,
        responseUrl: response.url,
        elapsed: firstByteTime - startTime
      });
      _this.hls.emit(EVENT.LOAD_RESPONSE_HEADERS, {
        headers: response.headers,
        url
      });
    });
    _defineProperty(this, "_onLoaderRetry", function(error, retryTime) {
      _this.hls.emit(Event.LOAD_RETRY, {
        error: StreamingError.network(error),
        retryTime
      });
    });
    this.hls = hls;
    this._timer = null;
    this._useLowLatency = hls.config.useLowLatency;
    var _this$hls$config = this.hls.config, retryCount = _this$hls$config.retryCount, retryDelay = _this$hls$config.retryDelay, manifestLoadTimeout = _this$hls$config.manifestLoadTimeout, fetchOptions = _this$hls$config.fetchOptions;
    this._loader = new NetLoader(_objectSpread2(_objectSpread2({}, fetchOptions), {}, {
      responseType: "text",
      retry: retryCount,
      retryDelay,
      timeout: manifestLoadTimeout,
      onRetryError: this._onLoaderRetry
    }));
    this._audioLoader = new NetLoader(_objectSpread2(_objectSpread2({}, fetchOptions), {}, {
      responseType: "text",
      retry: retryCount,
      retryDelay,
      timeout: manifestLoadTimeout,
      onRetryError: this._onLoaderRetry
    }));
    this._subtitleLoader = new NetLoader(_objectSpread2(_objectSpread2({}, fetchOptions), {}, {
      responseType: "text",
      retry: retryCount,
      retryDelay,
      timeout: manifestLoadTimeout,
      onRetryError: this._onLoaderRetry
    }));
  }
  _createClass(ManifestLoader2, [{
    key: "load",
    value: function() {
      var _load = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(url, audioUrl, subtitleUrl) {
        var toLoad, videoText, audioText, subtitleText, videoResUrl, audioResUrl, subtitleResUrl, _yield$Promise$all, _yield$Promise$all2, video, audio, subtitle, _audio$response, _subtitle$response, _audio$response2, onPreM3U8Parse, playlist, audioPlaylist, subtitlePlaylist, _playlist;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1)
            switch (_context.prev = _context.next) {
              case 0:
                toLoad = [this._loader.load(url)];
                if (audioUrl) {
                  toLoad.push(this._audioLoader.load(audioUrl));
                }
                if (subtitleUrl) {
                  toLoad.push(this._subtitleLoader.load(subtitleUrl));
                }
                _context.prev = 3;
                _context.next = 6;
                return Promise.all(toLoad);
              case 6:
                _yield$Promise$all = _context.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
                video = _yield$Promise$all2[0];
                audio = _yield$Promise$all2[1];
                subtitle = _yield$Promise$all2[2];
                if (video) {
                  _context.next = 13;
                  break;
                }
                return _context.abrupt("return", []);
              case 13:
                this._emitOnLoaded(video, url);
                videoText = video.data;
                videoResUrl = video.response.url || url;
                if (audioUrl) {
                  audioText = audio === null || audio === void 0 ? void 0 : audio.data;
                  subtitleText = subtitle === null || subtitle === void 0 ? void 0 : subtitle.data;
                  audioResUrl = (audio === null || audio === void 0 ? void 0 : (_audio$response = audio.response) === null || _audio$response === void 0 ? void 0 : _audio$response.url) || audioUrl;
                  subtitleResUrl = (subtitle === null || subtitle === void 0 ? void 0 : (_subtitle$response = subtitle.response) === null || _subtitle$response === void 0 ? void 0 : _subtitle$response.url) || subtitleUrl;
                  audioText && this._emitOnLoaded(audio, audioUrl);
                  subtitleText && this._emitOnLoaded(subtitle, subtitleUrl);
                } else {
                  subtitleText = audio === null || audio === void 0 ? void 0 : audio.data;
                  subtitleResUrl = (audio === null || audio === void 0 ? void 0 : (_audio$response2 = audio.response) === null || _audio$response2 === void 0 ? void 0 : _audio$response2.url) || subtitleUrl;
                  subtitleText && this._emitOnLoaded(audio, subtitleUrl);
                }
                _context.next = 22;
                break;
              case 19:
                _context.prev = 19;
                _context.t0 = _context["catch"](3);
                throw StreamingError.network(_context.t0);
              case 22:
                onPreM3U8Parse = this.hls.config.onPreM3U8Parse;
                _context.prev = 23;
                if (onPreM3U8Parse) {
                  videoText = onPreM3U8Parse(videoText) || videoText;
                  if (audioText)
                    audioText = onPreM3U8Parse(audioText, true) || audioText;
                  if (subtitleText)
                    subtitleText = onPreM3U8Parse(subtitleText, true) || subtitleText;
                }
                playlist = M3U8Parser.parse(videoText, videoResUrl, this._useLowLatency);
                if (!(((_playlist = playlist) === null || _playlist === void 0 ? void 0 : _playlist.live) === false && playlist.segments && !playlist.segments.length)) {
                  _context.next = 28;
                  break;
                }
                throw new Error("empty segments list");
              case 28:
                if (audioText) {
                  audioPlaylist = M3U8Parser.parse(audioText, audioResUrl, this._useLowLatency);
                }
                if (subtitleText) {
                  subtitlePlaylist = M3U8Parser.parse(subtitleText, subtitleResUrl, this._useLowLatency);
                }
                _context.next = 35;
                break;
              case 32:
                _context.prev = 32;
                _context.t1 = _context["catch"](23);
                throw new StreamingError(ERR.MANIFEST, ERR.SUB_TYPES.HLS, _context.t1);
              case 35:
                if (playlist) {
                  if (playlist.isMaster) {
                    this.hls.emit(Event.HLS_MANIFEST_LOADED, {
                      playlist
                    });
                  } else {
                    this.hls.emit(Event.HLS_LEVEL_LOADED, {
                      playlist
                    });
                  }
                }
                return _context.abrupt("return", [playlist, audioPlaylist, subtitlePlaylist]);
              case 37:
              case "end":
                return _context.stop();
            }
        }, _callee, this, [[3, 19], [23, 32]]);
      }));
      function load(_x, _x2, _x3) {
        return _load.apply(this, arguments);
      }
      return load;
    }()
  }, {
    key: "parseText",
    value: function parseText(videoText, url) {
      var onPreM3U8Parse = this.hls.config.onPreM3U8Parse;
      var playlist;
      try {
        var _playlist2;
        if (onPreM3U8Parse) {
          videoText = onPreM3U8Parse(videoText) || videoText;
        }
        playlist = M3U8Parser.parse(videoText, url, this._useLowLatency);
        if (((_playlist2 = playlist) === null || _playlist2 === void 0 ? void 0 : _playlist2.live) === false && playlist.segments && !playlist.segments.length) {
          throw new Error("empty segments list");
        }
      } catch (error) {
        throw new StreamingError(ERR.MANIFEST, ERR.SUB_TYPES.HLS, error);
      }
      if (playlist) {
        if (playlist.isMaster) {
          this.hls.emit(Event.HLS_MANIFEST_LOADED, {
            playlist
          });
        } else {
          this.hls.emit(Event.HLS_LEVEL_LOADED, {
            playlist
          });
        }
      }
      return [playlist];
    }
  }, {
    key: "poll",
    value: function poll(url, audioUrl, subtitleUrl, cb, errorCb, time) {
      var _this2 = this;
      clearTimeout(this._timer);
      time = time || 3e3;
      var retryCount = this.hls.config.pollRetryCount;
      var fn = /* @__PURE__ */ function() {
        var _ref2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2() {
          var res;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1)
              switch (_context2.prev = _context2.next) {
                case 0:
                  clearTimeout(_this2._timer);
                  _context2.prev = 1;
                  _context2.next = 4;
                  return _this2.load(url, audioUrl, subtitleUrl);
                case 4:
                  res = _context2.sent;
                  if (res[0]) {
                    _context2.next = 7;
                    break;
                  }
                  return _context2.abrupt("return");
                case 7:
                  retryCount = _this2.hls.config.pollRetryCount;
                  cb(res[0], res[1], res[2]);
                  _context2.next = 15;
                  break;
                case 11:
                  _context2.prev = 11;
                  _context2.t0 = _context2["catch"](1);
                  retryCount--;
                  if (retryCount <= 0) {
                    errorCb(_context2.t0);
                  }
                case 15:
                  _this2._timer = setTimeout(fn, time);
                case 16:
                case "end":
                  return _context2.stop();
              }
          }, _callee2, null, [[1, 11]]);
        }));
        return function fn2() {
          return _ref2.apply(this, arguments);
        };
      }();
      this._timer = setTimeout(fn, time);
    }
  }, {
    key: "stopPoll",
    value: function stopPoll() {
      clearTimeout(this._timer);
      return this.cancel();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      return Promise.all([this._loader.cancel(), this._audioLoader.cancel()]);
    }
  }]);
  return ManifestLoader2;
}();
export { ManifestLoader };
