import { defineProperty as _defineProperty, inherits as _inherits, createSuper as _createSuper, createClass as _createClass, classCallCheck as _classCallCheck, assertThisInitialized as _assertThisInitialized, asyncToGenerator as _asyncToGenerator, slicedToArray as _slicedToArray, regeneratorRuntime as _regeneratorRuntime, typeof as _typeof, toConsumableArray as _toConsumableArray } from "../_virtual/_rollupPluginBabelHelpers.js";
import EventEmitter from "eventemitter3";
import { Logger, Buffer, StreamingError, isMediaPlaying, SeiService, GapService, MediaStatsService, MSE, getVideoPlaybackQuality, ERR } from "xgplayer-streaming-shared";
import { Logger as Logger$1 } from "xgplayer-transmuxer";
import { BufferService } from "./buffer-service/index.js";
import { getConfig } from "./config.js";
import { Event } from "./constants.js";
import { ManifestLoader } from "./manifest-loader/index.js";
import { Playlist } from "./playlist/index.js";
import { SegmentLoader } from "./segment-loader/index.js";
import { clamp } from "./utils.js";
var logger = new Logger("hls");
var Hls = /* @__PURE__ */ function(_EventEmitter) {
  _inherits(Hls2, _EventEmitter);
  var _super = _createSuper(Hls2);
  function Hls2(_cfg) {
    var _this;
    _classCallCheck(this, Hls2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "version", Hls2.version);
    _defineProperty(_assertThisInitialized(_this), "media", null);
    _defineProperty(_assertThisInitialized(_this), "config", null);
    _defineProperty(_assertThisInitialized(_this), "_manifestLoader", null);
    _defineProperty(_assertThisInitialized(_this), "_segmentLoader", null);
    _defineProperty(_assertThisInitialized(_this), "_playlist", null);
    _defineProperty(_assertThisInitialized(_this), "_bufferService", null);
    _defineProperty(_assertThisInitialized(_this), "_gapService", null);
    _defineProperty(_assertThisInitialized(_this), "_seiService", null);
    _defineProperty(_assertThisInitialized(_this), "_stats", null);
    _defineProperty(_assertThisInitialized(_this), "_prevSegSn", null);
    _defineProperty(_assertThisInitialized(_this), "_prevSegCc", null);
    _defineProperty(_assertThisInitialized(_this), "_tickTimer", null);
    _defineProperty(_assertThisInitialized(_this), "_tickInterval", 500);
    _defineProperty(_assertThisInitialized(_this), "_segmentProcessing", false);
    _defineProperty(_assertThisInitialized(_this), "_reloadOnPlay", false);
    _defineProperty(_assertThisInitialized(_this), "_switchUrlOpts", null);
    _defineProperty(_assertThisInitialized(_this), "_isProcessQuotaExceeded", false);
    _defineProperty(_assertThisInitialized(_this), "_loadSegment", /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
      var nextSeg, _assertThisInitialize, config, bInfo, bufferThroughout;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              if (!(_this._segmentProcessing || !_this.media)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              nextSeg = _this._playlist.nextSegment;
              _assertThisInitialize = _assertThisInitialized(_this), config = _assertThisInitialize.config;
              if (nextSeg) {
                _context.next = 6;
                break;
              }
              return _context.abrupt("return");
            case 6:
              if (_this.isLive) {
                _context.next = 16;
                break;
              }
              bInfo = _this.bufferInfo();
              if (_this.media.paused && !_this.media.currentTime) {
                bInfo = _this.bufferInfo(bInfo.nextStart || 0.5);
              }
              bufferThroughout = Math.abs(bInfo.end - _this.media.duration) < 0.1;
              if (!(bInfo.remaining >= config.preloadTime || bufferThroughout)) {
                _context.next = 13;
                break;
              }
              _this._tryEos();
              return _context.abrupt("return");
            case 13:
              if (!(config.preferMMSStreaming && !_this._bufferService.msStreaming)) {
                _context.next = 15;
                break;
              }
              return _context.abrupt("return");
            case 15:
              if (!_this._urlSwitching && _this._prevSegSn !== nextSeg.sn - 1 && bInfo.end && Math.abs(nextSeg.start - bInfo.end) > 1) {
                _this._playlist.setNextSegmentByIndex(_this._playlist.findSegmentIndexByTime(bInfo.end + 0.1));
              }
            case 16:
              return _context.abrupt("return", _this._loadSegmentDirect());
            case 17:
            case "end":
              return _context.stop();
          }
      }, _callee);
    })));
    _defineProperty(_assertThisInitialized(_this), "_onLoadeddata", function() {
      if (_this.isLive && !_this.config.mseLowLatency) {
        if (_this.media.duration !== Infinity) {
          _this._bufferService.updateDuration(Infinity).catch(function(e) {
          });
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_onPlay", /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_this.media.seeking && _this.media.currentTime === 0)) {
                _context2.next = 3;
                break;
              }
              logger.debug("replay currentTime 0, return");
              return _context2.abrupt("return");
            case 3:
              clearTimeout(_this._disconnectTimer);
              if (!_this._reloadOnPlay) {
                _context2.next = 9;
                break;
              }
              _this._reloadOnPlay = false;
              _this.replay(true);
              _context2.next = 12;
              break;
            case 9:
              _context2.next = 11;
              return _this._loadSegment();
            case 11:
              _this._startTick();
            case 12:
            case "end":
              return _context2.stop();
          }
      }, _callee2);
    })));
    _defineProperty(_assertThisInitialized(_this), "_onPause", function() {
      if (_this.isLive) {
        if (!_this._reloadOnPlay) {
          var disconnectTime = _this.config.disconnectTime;
          if (disconnectTime === null || disconnectTime === void 0)
            disconnectTime = _this._playlist.dvrWindow;
          if (!Number.isFinite(disconnectTime))
            return;
          clearTimeout(_this._disconnectTimer);
          _this._disconnectTimer = setTimeout(function() {
            _this._reloadOnPlay = true;
            _this._clear();
          }, disconnectTime || 0);
        }
      } else {
        _this._stopTick();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_onSeeking", /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3() {
      var seekTime, seekRange, newSeekTime, curSeg, info, segIndex, seg;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_this.media) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return");
            case 2:
              _this._onCheckQuotaExceeded();
              seekTime = _this.media.currentTime;
              seekRange = _this._playlist.seekRange;
              if (!seekRange) {
                _context3.next = 10;
                break;
              }
              newSeekTime = clamp(seekTime, seekRange[0], _this.isLive ? seekRange[1] : _this.media.duration);
              if (!(newSeekTime >= 0 && Math.abs(seekTime - newSeekTime) >= 0.1)) {
                _context3.next = 10;
                break;
              }
              _this.media.currentTime = newSeekTime;
              return _context3.abrupt("return");
            case 10:
              curSeg = _this._playlist.currentSegment;
              info = Buffer.info(Buffer.get(_this.media), seekTime, 0.1);
              if (!curSeg) {
                _context3.next = 17;
                break;
              }
              if (!(info.end && Math.abs(info.end - curSeg.end) < 0.2)) {
                _context3.next = 15;
                break;
              }
              return _context3.abrupt("return");
            case 15:
              if (!(_this.isLive && info.end)) {
                _context3.next = 17;
                break;
              }
              return _context3.abrupt("return");
            case 17:
              segIndex = _this._playlist.findSegmentIndexByTime(seekTime);
              seg = _this._playlist.getSegmentByIndex(segIndex);
              if (!(segIndex === null || segIndex === void 0 || !seg || _this._segmentProcessing && seg === _this._playlist.nextSegment)) {
                _context3.next = 21;
                break;
              }
              return _context3.abrupt("return");
            case 21:
              logger.debug("seek to", seekTime, seg);
              _this._playlist.setNextSegmentByIndex(segIndex);
              _this._stopTick();
              _context3.next = 26;
              return _this._segmentLoader.cancel();
            case 26:
              _this._segmentProcessing = false;
              if (!(!info.end || _this.isLive)) {
                _context3.next = 30;
                break;
              }
              _context3.next = 30;
              return _this._loadSegmentDirect(true);
            case 30:
              _this._startTick();
            case 31:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    })));
    _defineProperty(_assertThisInitialized(_this), "_onTimeupdate", function() {
      if (!_this.media)
        return;
      var cfg = _this.config;
      if (cfg.isLive && cfg.maxLatency && cfg.targetLatency && _this.media) {
        var liveEdge = _this._playlist.liveEdge;
        if (!liveEdge)
          return;
        var latency = liveEdge - _this.media.currentTime;
        if (latency >= cfg.maxLatency) {
          logger.debug("latency jump, currentTime:".concat(_this.media.currentTime, ", liveEdge:").concat(liveEdge, ",  latency=").concat(latency));
          _this.media.currentTime = liveEdge - cfg.targetLatency;
        }
      }
      if (cfg.seiInTime) {
        var _this$_seiService;
        (_this$_seiService = _this._seiService) === null || _this$_seiService === void 0 ? void 0 : _this$_seiService.throw(_this.media.currentTime);
      }
      if (_this.config.allowedStreamTrackChange && !_this.config.softDecode) {
        _this._checkStreamTrackChange(_this.media.currentTime);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "_tick", function() {
      if (!_this.media)
        return;
      _this._startTick();
      var media = _this.media;
      var buffered = Buffer.get(media);
      var segLoaderError = _this._segmentLoader.error;
      _this._onCheckQuotaExceeded();
      if (_this._isProcessQuotaExceeded) {
        if (!_this._bufferService.isFull()) {
          _this._isProcessQuotaExceeded = false;
          _this._segmentProcessing = false;
        }
      }
      if (segLoaderError) {
        var bufferMaxHoleTolerance = 0.5;
        if (!media.readyState || _this.bufferInfo(bufferMaxHoleTolerance).remaining < 1) {
          segLoaderError.fatal = true;
          _this._emitError(StreamingError.network(segLoaderError));
        }
        return;
      }
      if (Buffer.end(buffered) >= 0.1 && media.readyState) {
        if (isMediaPlaying(media)) {
          _this._loadSegment();
          if (_this._gapService) {
            _this._gapService.do(media, _this.config.maxJumpDistance, _this.isLive);
          }
        } else {
          if (media.readyState < 2 && _this._gapService) {
            _this._gapService.do(media, _this.config.maxJumpDistance, !media.currentTime ? true : _this.isLive);
          }
        }
      }
      if (!_this.isLive) {
        _this._tryEos();
      }
    });
    _this.config = _cfg = getConfig(_cfg);
    _this.media = _this.config.media;
    _this._manifestLoader = new ManifestLoader(_assertThisInitialized(_this));
    _this._segmentLoader = new SegmentLoader(_assertThisInitialized(_this));
    _this._playlist = new Playlist(_assertThisInitialized(_this));
    _this._bufferService = new BufferService(_assertThisInitialized(_this));
    if (_cfg.seiInTime) {
      _this._seiService = new SeiService(_assertThisInitialized(_this));
    }
    if (!_cfg.softDecode)
      _this._gapService = new GapService();
    _this._stats = new MediaStatsService(_assertThisInitialized(_this), 9e4);
    _this.media.addEventListener("loadeddata", _this._onLoadeddata);
    _this.media.addEventListener("play", _this._onPlay);
    _this.media.addEventListener("pause", _this._onPause);
    _this.media.addEventListener("seeking", _this._onSeeking);
    _this.media.addEventListener("timeupdate", _this._onTimeupdate);
    return _this;
  }
  _createClass(Hls2, [{
    key: "isLive",
    get: function get() {
      return this._playlist.isLive;
    }
  }, {
    key: "streams",
    get: function get() {
      return this._playlist.streams;
    }
  }, {
    key: "currentStream",
    get: function get() {
      return this._playlist.currentStream;
    }
  }, {
    key: "hasSubtitle",
    get: function get() {
      return this._playlist.hasSubtitle;
    }
  }, {
    key: "totalDuration",
    get: function get() {
      return this._playlist.totalDuration;
    }
  }, {
    key: "baseDts",
    get: function get() {
      var _this$_bufferService;
      return (_this$_bufferService = this._bufferService) === null || _this$_bufferService === void 0 ? void 0 : _this$_bufferService.baseDts;
    }
  }, {
    key: "speedInfo",
    value: function speedInfo() {
      return this._segmentLoader.speedInfo();
    }
  }, {
    key: "bufferInfo",
    value: function bufferInfo() {
      var _this$media;
      var maxHole = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0.1;
      return Buffer.info(Buffer.get(this.media), (_this$media = this.media) === null || _this$media === void 0 ? void 0 : _this$media.currentTime, maxHole);
    }
  }, {
    key: "getStats",
    value: function getStats() {
      return this._stats.getStats();
    }
  }, {
    key: "playbackQuality",
    value: function playbackQuality() {
      return getVideoPlaybackQuality(this.media);
    }
  }, {
    key: "load",
    value: function() {
      var _load = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee4(url) {
        var reuseMse, _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1)
            switch (_context4.prev = _context4.next) {
              case 0:
                reuseMse = _args4.length > 1 && _args4[1] !== void 0 ? _args4[1] : false;
                if (url)
                  this.config.url = url;
                url = this.config.url;
                _context4.next = 5;
                return this._reset(reuseMse);
              case 5:
                _context4.next = 7;
                return this._loadData(url);
              case 7:
                this._startTick();
              case 8:
              case "end":
                return _context4.stop();
            }
        }, _callee4, this);
      }));
      function load(_x) {
        return _load.apply(this, arguments);
      }
      return load;
    }()
  }, {
    key: "_loadData",
    value: function() {
      var _loadData2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee5(url) {
        var manifest, currentStream, _this$_switchUrlOpts, _this$_switchUrlOpts2, switchTimePoint, segIdx, nextSeg, bufferClearStartPoint, preIndex, startTime, _this$_switchUrlOpts3;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1)
            switch (_context5.prev = _context5.next) {
              case 0:
                try {
                  if (url)
                    url = url.trim();
                } catch (e) {
                }
                if (url) {
                  _context5.next = 3;
                  break;
                }
                throw this._emitError(new StreamingError(ERR.OTHER, ERR.SUB_TYPES.OPTION, null, null, "m3u8 url is missing"));
              case 3:
                _context5.next = 5;
                return this._loadM3U8(url);
              case 5:
                manifest = _context5.sent;
                currentStream = this._playlist.currentStream;
                if (!(this._urlSwitching && !this.isLive)) {
                  _context5.next = 17;
                  break;
                }
                if (currentStream.bitrate === 0 && (_this$_switchUrlOpts = this._switchUrlOpts) !== null && _this$_switchUrlOpts !== void 0 && _this$_switchUrlOpts.bitrate) {
                  currentStream.bitrate = (_this$_switchUrlOpts2 = this._switchUrlOpts) === null || _this$_switchUrlOpts2 === void 0 ? void 0 : _this$_switchUrlOpts2.bitrate;
                }
                switchTimePoint = this._getSeamlessSwitchPoint();
                this.config.startTime = switchTimePoint;
                segIdx = this._playlist.findSegmentIndexByTime(switchTimePoint);
                nextSeg = this._playlist.getSegmentByIndex(segIdx + 1);
                if (!nextSeg) {
                  _context5.next = 17;
                  break;
                }
                bufferClearStartPoint = nextSeg.start;
                _context5.next = 17;
                return this._bufferService.removeBuffer(bufferClearStartPoint);
              case 17:
                if (this._urlSwitching && this.isLive) {
                  preIndex = this._playlist.setNextSegmentBySN(this._prevSegSn);
                  logger.log("segment nb=".concat(this._prevSegSn, " index of ").concat(preIndex, " in the new playlist"));
                  if (preIndex === -1) {
                    this._prevSegCc = null;
                    this._prevSegSn = null;
                  }
                }
                if (manifest) {
                  _context5.next = 20;
                  break;
                }
                return _context5.abrupt("return");
              case 20:
                if (!this.isLive) {
                  _context5.next = 31;
                  break;
                }
                this._bufferService.setLiveSeekableRange(0, 4294967295);
                logger.log("totalDuration first time got:", this._playlist.totalDuration);
                logger.log("nb segments got:", this._playlist.nbSegments);
                if (this.config.targetLatency < this._playlist.totalDuration) {
                  this.config.targetLatency = this._playlist.totalDuration;
                  this.config.maxLatency = 1.5 * this.config.targetLatency;
                }
                if (!manifest.isMaster)
                  this._pollM3U8(url);
                if (!(this._playlist.nbSegments < this.config.minSegmentsStartPlay)) {
                  _context5.next = 28;
                  break;
                }
                return _context5.abrupt("return");
              case 28:
                _context5.next = 30;
                return this._loadSegment();
              case 30:
                return _context5.abrupt("return");
              case 31:
                _context5.next = 33;
                return this._bufferService.updateDuration(currentStream.totalDuration);
              case 33:
                startTime = this.config.startTime;
                if (startTime) {
                  if (!((_this$_switchUrlOpts3 = this._switchUrlOpts) !== null && _this$_switchUrlOpts3 !== void 0 && _this$_switchUrlOpts3.seamless)) {
                    this.media.currentTime = startTime;
                  }
                  this._playlist.setNextSegmentByIndex(this._playlist.findSegmentIndexByTime(startTime) || 0);
                }
                _context5.next = 37;
                return this._loadSegment();
              case 37:
              case "end":
                return _context5.stop();
            }
        }, _callee5, this);
      }));
      function _loadData(_x2) {
        return _loadData2.apply(this, arguments);
      }
      return _loadData;
    }()
  }, {
    key: "replay",
    value: function() {
      var _replay = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee6(isPlayEmit) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1)
            switch (_context6.prev = _context6.next) {
              case 0:
                this.config.startTime = 0;
                _context6.next = 3;
                return this.load();
              case 3:
                this._reloadOnPlay = false;
                return _context6.abrupt("return", this.media.play(!isPlayEmit));
              case 5:
              case "end":
                return _context6.stop();
            }
        }, _callee6, this);
      }));
      function replay(_x3) {
        return _replay.apply(this, arguments);
      }
      return replay;
    }()
  }, {
    key: "switchURL",
    value: function() {
      var _switchURL = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee7(url) {
        var options, defaultOpts, key, _options, seamless, startTime, appended, _args7 = arguments;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1)
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 1 && _args7[1] !== void 0 ? _args7[1] : {};
                defaultOpts = {
                  seamless: false,
                  startTime: 0,
                  bitrate: 0
                };
                _context7.t0 = _typeof(options);
                _context7.next = _context7.t0 === "number" ? 5 : _context7.t0 === "boolean" ? 7 : _context7.t0 === "object" ? 9 : 11;
                break;
              case 5:
                options = {
                  startTime: options
                };
                return _context7.abrupt("break", 12);
              case 7:
                options = {
                  seamless: options
                };
                return _context7.abrupt("break", 12);
              case 9:
                for (key in options) {
                  if (options[key] === void 0 || options[key] === null) {
                    delete options[key];
                  }
                }
                return _context7.abrupt("break", 12);
              case 11:
                throw "unsupported switchURL args: ".concat(options);
              case 12:
                options = Object.assign({}, defaultOpts, options);
                _options = options, seamless = _options.seamless, startTime = _options.startTime;
                this.config.url = url;
                this.config.startTime = startTime;
                this._switchUrlOpts = options;
                if (seamless) {
                  _context7.next = 38;
                  break;
                }
                _context7.prev = 18;
                if (!this.config.softDecode) {
                  _context7.next = 23;
                  break;
                }
                _context7.t1 = this.load(url);
                _context7.next = 26;
                break;
              case 23:
                _context7.next = 25;
                return this.load(url);
              case 25:
                _context7.t1 = _context7.sent;
              case 26:
                appended = _context7.t1;
                _context7.next = 33;
                break;
              case 29:
                _context7.prev = 29;
                _context7.t2 = _context7["catch"](18);
                this.emit(Event.SWITCH_URL_FAILED, _context7.t2);
                throw _context7.t2;
              case 33:
                this._reloadOnPlay = false;
                if (appended) {
                  this.emit(Event.SWITCH_URL_SUCCESS, {
                    url
                  });
                }
                return _context7.abrupt("return", this.media.play(true));
              case 38:
                this._urlSwitching = true;
                if (!this.isLive) {
                  this._prevSegSn = null;
                  this._prevSegCc = null;
                }
                this._playlist.reset();
                this._bufferService.seamlessSwitch();
                _context7.next = 44;
                return this._clear();
              case 44:
                _context7.next = 46;
                return this._loadData(url);
              case 46:
                this._startTick();
              case 47:
                this._switchUrlOpts = null;
              case 48:
              case "end":
                return _context7.stop();
            }
        }, _callee7, this, [[18, 29]]);
      }));
      function switchURL(_x4) {
        return _switchURL.apply(this, arguments);
      }
      return switchURL;
    }()
  }, {
    key: "switchStream",
    value: function() {
      var _switchStream = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee8(id) {
        var force, curStream, streams, toSwitch, curId, _args8 = arguments;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1)
            switch (_context8.prev = _context8.next) {
              case 0:
                force = _args8.length > 1 && _args8[1] !== void 0 ? _args8[1] : true;
                curStream = this.currentStream;
                streams = this.streams;
                if (!(!curStream || curStream.id === id || !streams || streams.length < 2)) {
                  _context8.next = 5;
                  break;
                }
                return _context8.abrupt("return");
              case 5:
                toSwitch = streams.find(function(x) {
                  return x.id === id;
                });
                if (toSwitch) {
                  _context8.next = 8;
                  break;
                }
                return _context8.abrupt("return");
              case 8:
                _context8.prev = 8;
                _context8.next = 11;
                return this._clear();
              case 11:
                if (!force) {
                  _context8.next = 14;
                  break;
                }
                _context8.next = 14;
                return this._bufferService.clearAllBuffer();
              case 14:
                _context8.next = 19;
                break;
              case 16:
                _context8.prev = 16;
                _context8.t0 = _context8["catch"](8);
                throw this._emitError(StreamingError.create(_context8.t0));
              case 19:
                if (curStream.currentAudioStream && toSwitch.audioStreams.length > 2) {
                  curId = curStream.currentAudioStream.id;
                  toSwitch.currentAudioStream = toSwitch.audioStreams.find(function(x) {
                    return x.id === curId;
                  }) || toSwitch.currentAudioStream;
                }
                this._playlist.currentStream = toSwitch;
                _context8.prev = 21;
                if (!(this.isLive || !toSwitch.segments.length)) {
                  _context8.next = 25;
                  break;
                }
                _context8.next = 25;
                return this._refreshM3U8();
              case 25:
                this._playlist.setNextSegmentByIndex(this._playlist.findSegmentIndexByTime(this.media.currentTime) || 0);
                this._prevSegCc = null;
                _context8.next = 29;
                return this._loadSegmentDirect();
              case 29:
                _context8.next = 35;
                break;
              case 31:
                _context8.prev = 31;
                _context8.t1 = _context8["catch"](21);
                this._playlist.currentStream = curStream;
                throw _context8.t1;
              case 35:
                this._startTick();
                return _context8.abrupt("return", toSwitch);
              case 37:
              case "end":
                return _context8.stop();
            }
        }, _callee8, this, [[8, 16], [21, 31]]);
      }));
      function switchStream(_x5) {
        return _switchStream.apply(this, arguments);
      }
      return switchStream;
    }()
  }, {
    key: "switchAudioStream",
    value: function() {
      var _switchAudioStream = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee9(id) {
        var force, curStream, audioStream, toSwitch, _args9 = arguments;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1)
            switch (_context9.prev = _context9.next) {
              case 0:
                force = _args9.length > 1 && _args9[1] !== void 0 ? _args9[1] : true;
                curStream = this.currentStream;
                if (curStream) {
                  _context9.next = 4;
                  break;
                }
                return _context9.abrupt("return");
              case 4:
                audioStream = curStream.currentAudioStream;
                if (!(!audioStream || audioStream.id === id || curStream.audioStreams.length < 2)) {
                  _context9.next = 7;
                  break;
                }
                return _context9.abrupt("return");
              case 7:
                toSwitch = curStream.audioStreams.find(function(x) {
                  return x.id === id;
                });
                if (toSwitch) {
                  _context9.next = 10;
                  break;
                }
                return _context9.abrupt("return");
              case 10:
                _context9.prev = 10;
                _context9.next = 13;
                return this._clear();
              case 13:
                if (!force) {
                  _context9.next = 16;
                  break;
                }
                _context9.next = 16;
                return this._bufferService.clearAllBuffer();
              case 16:
                _context9.next = 21;
                break;
              case 18:
                _context9.prev = 18;
                _context9.t0 = _context9["catch"](10);
                throw this._emitError(StreamingError.create(_context9.t0));
              case 21:
                curStream.currentAudioStream = toSwitch;
                _context9.prev = 22;
                if (!(this.isLive || !toSwitch.segments.length)) {
                  _context9.next = 26;
                  break;
                }
                _context9.next = 26;
                return this._refreshM3U8();
              case 26:
                this._playlist.setNextSegmentByIndex(this._playlist.findSegmentIndexByTime(this.media.currentTime) || 0);
                this._prevSegCc = null;
                _context9.next = 30;
                return this._loadSegmentDirect();
              case 30:
                _context9.next = 36;
                break;
              case 32:
                _context9.prev = 32;
                _context9.t1 = _context9["catch"](22);
                curStream.currentAudioStream = audioStream;
                throw _context9.t1;
              case 36:
                this._startTick();
                return _context9.abrupt("return", toSwitch);
              case 38:
              case "end":
                return _context9.stop();
            }
        }, _callee9, this, [[10, 18], [22, 32]]);
      }));
      function switchAudioStream(_x6) {
        return _switchAudioStream.apply(this, arguments);
      }
      return switchAudioStream;
    }()
  }, {
    key: "switchSubtitleStream",
    value: function() {
      var _switchSubtitleStream = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee10(lang) {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1)
            switch (_context10.prev = _context10.next) {
              case 0:
                this._playlist.switchSubtitle(lang);
                _context10.next = 3;
                return this._manifestLoader.stopPoll();
              case 3:
                _context10.next = 5;
                return this._refreshM3U8();
              case 5:
              case "end":
                return _context10.stop();
            }
        }, _callee10, this);
      }));
      function switchSubtitleStream(_x7) {
        return _switchSubtitleStream.apply(this, arguments);
      }
      return switchSubtitleStream;
    }()
  }, {
    key: "destroy",
    value: function() {
      var _destroy = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee11() {
        var _this$_seiService2;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1)
            switch (_context11.prev = _context11.next) {
              case 0:
                if (this.media) {
                  _context11.next = 2;
                  break;
                }
                return _context11.abrupt("return");
              case 2:
                this.removeAllListeners();
                this._playlist.reset();
                this._segmentLoader.reset();
                (_this$_seiService2 = this._seiService) === null || _this$_seiService2 === void 0 ? void 0 : _this$_seiService2.reset();
                this.media.removeEventListener("loadeddata", this._onLoadeddata);
                this.media.removeEventListener("play", this._onPlay);
                this.media.removeEventListener("pause", this._onPause);
                this.media.removeEventListener("seeking", this._onSeeking);
                this.media.removeEventListener("timeupdate", this._onTimeupdate);
                _context11.next = 13;
                return Promise.all([this._clear(), this._bufferService.destroy()]);
              case 13:
                this.media = null;
              case 14:
              case "end":
                return _context11.stop();
            }
        }, _callee11, this);
      }));
      function destroy() {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }()
  }, {
    key: "_loadM3U8",
    value: function() {
      var _loadM3U = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee12(url) {
        var playlist, _this$config$manifest, _this$config$manifest2, manifest, _ref4, _ref5, _this$_playlist$curre;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1)
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.prev = 0;
                manifest = (_this$config$manifest = this.config.manifestList) === null || _this$config$manifest === void 0 ? void 0 : (_this$config$manifest2 = _this$config$manifest.filter(function(x) {
                  return x.url === url;
                })[0]) === null || _this$config$manifest2 === void 0 ? void 0 : _this$config$manifest2.manifest;
                if (!manifest) {
                  _context12.next = 6;
                  break;
                }
                _context12.t0 = this._manifestLoader.parseText(manifest, url);
                _context12.next = 9;
                break;
              case 6:
                _context12.next = 8;
                return this._manifestLoader.load(url);
              case 8:
                _context12.t0 = _context12.sent;
              case 9:
                _ref4 = _context12.t0;
                _ref5 = _slicedToArray(_ref4, 1);
                playlist = _ref5[0];
                _context12.next = 17;
                break;
              case 14:
                _context12.prev = 14;
                _context12.t1 = _context12["catch"](0);
                throw this._emitError(StreamingError.create(_context12.t1));
              case 17:
                if (playlist) {
                  _context12.next = 19;
                  break;
                }
                return _context12.abrupt("return");
              case 19:
                this._playlist.upsertPlaylist(playlist);
                if (!playlist.isMaster) {
                  _context12.next = 24;
                  break;
                }
                if ((_this$_playlist$curre = this._playlist.currentStream.subtitleStreams) !== null && _this$_playlist$curre !== void 0 && _this$_playlist$curre.length) {
                  this.emit(Event.SUBTITLE_PLAYLIST, {
                    list: this._playlist.currentStream.subtitleStreams
                  });
                }
                _context12.next = 24;
                return this._refreshM3U8();
              case 24:
                this.emit(Event.STREAM_PARSED);
                return _context12.abrupt("return", playlist);
              case 26:
              case "end":
                return _context12.stop();
            }
        }, _callee12, this, [[0, 14]]);
      }));
      function _loadM3U8(_x8) {
        return _loadM3U.apply(this, arguments);
      }
      return _loadM3U8;
    }()
  }, {
    key: "_refreshM3U8",
    value: function _refreshM3U8() {
      var _stream$currentAudioS, _stream$currentSubtit, _this2 = this;
      var stream = this._playlist.currentStream;
      if (!stream || !stream.url)
        throw this._emitError(StreamingError.create(null, null, new Error("m3u8 url is not defined")));
      var url = stream.url;
      var audioUrl = (_stream$currentAudioS = stream.currentAudioStream) === null || _stream$currentAudioS === void 0 ? void 0 : _stream$currentAudioS.url;
      var subtitleUrl = (_stream$currentSubtit = stream.currentSubtitleStream) === null || _stream$currentSubtit === void 0 ? void 0 : _stream$currentSubtit.url;
      return this._manifestLoader.load(url, audioUrl, subtitleUrl).then(function(_ref6) {
        var _ref7 = _slicedToArray(_ref6, 3), mediaPlaylist = _ref7[0], audioPlaylist = _ref7[1], subtitlePlaylist = _ref7[2];
        if (!mediaPlaylist)
          return;
        _this2._playlist.upsertPlaylist(mediaPlaylist, audioPlaylist, subtitlePlaylist);
        if (!_this2.isLive)
          return;
        _this2._pollM3U8(url, audioUrl, subtitleUrl);
      }).catch(function(err) {
        throw _this2._emitError(StreamingError.create(err));
      });
    }
  }, {
    key: "_pollM3U8",
    value: function _pollM3U8(url, audioUrl, subtitleUrl) {
      var _this3 = this;
      var isEmpty = this._playlist.isEmpty;
      var pollInterval;
      if (this._playlist.lowLatency) {
        pollInterval = (this._playlist.currentStream.partTargetDuration * 2 || 0) * 1e3;
      } else {
        var _this$_playlist$lastS;
        pollInterval = (((_this$_playlist$lastS = this._playlist.lastSegment) === null || _this$_playlist$lastS === void 0 ? void 0 : _this$_playlist$lastS.duration) || 0) * 1e3;
      }
      this._manifestLoader.poll(
        url,
        audioUrl,
        subtitleUrl,
        function(p1, p2, p3) {
          _this3._playlist.upsertPlaylist(p1, p2, p3);
          _this3._playlist.clearOldSegment();
          var switchToNoEmpty = p1 && isEmpty && !_this3._playlist.isEmpty;
          if (switchToNoEmpty || !_this3._playlist.hadSegmentLoaded && _this3._playlist.nbSegments >= _this3.config.minSegmentsStartPlay) {
            _this3._loadSegment();
          }
          if (isEmpty)
            isEmpty = _this3._playlist.isEmpty;
        },
        function(err) {
          _this3._emitError(StreamingError.create(err));
        },
        pollInterval
      );
    }
  }, {
    key: "_loadSegmentDirect",
    value: function() {
      var _loadSegmentDirect2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee13(loadOnce) {
        var seg, appended, cachedError, _this$_playlist$curre2, bufferEnd, sameStream;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1)
            switch (_context13.prev = _context13.next) {
              case 0:
                seg = this._playlist.nextSegment;
                if (seg) {
                  _context13.next = 3;
                  break;
                }
                return _context13.abrupt("return");
              case 3:
                appended = false;
                cachedError = null;
                _context13.prev = 5;
                this._segmentProcessing = true;
                logger.log("load segment, sn:".concat(seg.sn, ", [").concat(seg.start, ", ").concat(seg.end, "], partIndex:").concat(seg.partIndex));
                _context13.next = 10;
                return this._reqAndBufferSegment(seg, this._playlist.getAudioSegment(seg));
              case 10:
                appended = _context13.sent;
                _context13.next = 16;
                break;
              case 13:
                _context13.prev = 13;
                _context13.t0 = _context13["catch"](5);
                cachedError = _context13.t0;
              case 16:
                _context13.prev = 16;
                this._segmentProcessing = false;
                return _context13.finish(16);
              case 19:
                if (!cachedError) {
                  _context13.next = 26;
                  break;
                }
                if (!this._bufferService.isFull()) {
                  _context13.next = 25;
                  break;
                }
                logger.log("load segment, sn:".concat(seg.sn, ", partIndex:").concat(seg.partIndex));
                this._segmentProcessing = true;
                this._isProcessQuotaExceeded = true;
                return _context13.abrupt("return", false);
              case 25:
                return _context13.abrupt("return", this._emitError(StreamingError.create(cachedError)));
              case 26:
                if (appended) {
                  bufferEnd = this.bufferInfo().end;
                  if (this.isLive && !this.media.seeking && bufferEnd && Math.abs(seg.end - bufferEnd) > 1) {
                    logger.warn("segment: ".concat(seg.sn, " expected end=").concat(seg.end, ", real end=").concat(bufferEnd));
                    this._playlist.feedbackLiveEdge(seg, bufferEnd);
                  }
                  sameStream = ((_this$_playlist$curre2 = this._playlist.currentStream) === null || _this$_playlist$curre2 === void 0 ? void 0 : _this$_playlist$curre2.url) === seg.parentUrl;
                  if (this._urlSwitching && !sameStream) {
                    logger.warn("pre playlist segment appended!");
                    this._bufferService.seamlessSwitch();
                  }
                  if (this.isLive && this._urlSwitching && sameStream) {
                    this._urlSwitching = false;
                    this.emit(Event.SWITCH_URL_SUCCESS, {
                      url: this.config.url
                    });
                  }
                  this._playlist.moveSegmentPointer();
                  if (seg.isLast) {
                    this._end();
                  } else if (!loadOnce) {
                    this._loadSegment();
                  }
                }
                return _context13.abrupt("return", appended);
              case 28:
              case "end":
                return _context13.stop();
            }
        }, _callee13, this, [[5, 13, 16, 19]]);
      }));
      function _loadSegmentDirect(_x9) {
        return _loadSegmentDirect2.apply(this, arguments);
      }
      return _loadSegmentDirect;
    }()
  }, {
    key: "_reqAndBufferSegment",
    value: function() {
      var _reqAndBufferSegment2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee14(seg, audioSeg) {
        var _this$_bufferService2;
        var cc, discontinuity, responses, data, sn, start, stream, before, contiguous, segStart;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1)
            switch (_context14.prev = _context14.next) {
              case 0:
                cc = seg ? seg.cc : audioSeg.cc;
                discontinuity = this._prevSegCc !== cc;
                responses = [];
                _context14.prev = 3;
                _context14.next = 6;
                return this._segmentLoader.load(seg, audioSeg, discontinuity);
              case 6:
                responses = _context14.sent;
                _context14.next = 14;
                break;
              case 9:
                _context14.prev = 9;
                _context14.t0 = _context14["catch"](3);
                _context14.t0.fatal = false;
                this._segmentLoader.error = _context14.t0;
                throw _context14.t0;
              case 14:
                if (responses[0]) {
                  _context14.next = 16;
                  break;
                }
                return _context14.abrupt("return");
              case 16:
                _context14.next = 18;
                return (_this$_bufferService2 = this._bufferService).decryptBuffer.apply(_this$_bufferService2, _toConsumableArray(responses));
              case 18:
                data = _context14.sent;
                if (data) {
                  _context14.next = 21;
                  break;
                }
                return _context14.abrupt("return");
              case 21:
                sn = seg ? seg.sn : audioSeg.sn;
                start = seg ? seg.start : audioSeg.start;
                stream = this._playlist.currentStream;
                this._bufferService.createSource(data[0], data[1], stream === null || stream === void 0 ? void 0 : stream.videoCodec, stream === null || stream === void 0 ? void 0 : stream.audioCodec);
                before = Date.now();
                contiguous = this._prevSegSn === sn - 1;
                if (this.isLive && this._urlSwitching) {
                  segStart = this.bufferInfo().end;
                  this._playlist.updateSegmentsRanges(sn, segStart);
                  logger.warn("update the new playlist liveEdge, segment id=".concat(sn, ", buffer start=").concat(segStart, ", liveEdge=").concat(this._playlist.liveEdge));
                  start = segStart;
                }
                _context14.next = 30;
                return this._bufferService.appendBuffer(seg, audioSeg, data[0], data[1], discontinuity, contiguous, start);
              case 30:
                this.emit(Event.APPEND_COST, {
                  elapsed: Date.now() - before,
                  url: seg.url
                });
                _context14.next = 33;
                return this._bufferService.evictBuffer(this.config.bufferBehind);
              case 33:
                this._prevSegCc = cc;
                this._prevSegSn = sn;
                return _context14.abrupt("return", true);
              case 36:
              case "end":
                return _context14.stop();
            }
        }, _callee14, this, [[3, 9]]);
      }));
      function _reqAndBufferSegment(_x10, _x11) {
        return _reqAndBufferSegment2.apply(this, arguments);
      }
      return _reqAndBufferSegment;
    }()
  }, {
    key: "_onCheckQuotaExceeded",
    value: function() {
      var _onCheckQuotaExceeded2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee15() {
        var seekTime, buffered, inBuffered, i, bufferBehind, mediaTime;
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1)
            switch (_context15.prev = _context15.next) {
              case 0:
                seekTime = this.media.currentTime;
                buffered = this.media.buffered;
                inBuffered = false;
                i = 0;
              case 4:
                if (!(i < buffered.length)) {
                  _context15.next = 11;
                  break;
                }
                if (!(buffered.start(0) >= seekTime && seekTime < buffered.end(i))) {
                  _context15.next = 8;
                  break;
                }
                inBuffered = true;
                return _context15.abrupt("break", 11);
              case 8:
                i++;
                _context15.next = 4;
                break;
              case 11:
                if (!this._bufferService.isFull()) {
                  _context15.next = 17;
                  break;
                }
                bufferBehind = inBuffered ? this.config.bufferBehind : 5;
                mediaTime = this.media.currentTime;
                if (!(mediaTime - bufferBehind > 0)) {
                  _context15.next = 17;
                  break;
                }
                _context15.next = 17;
                return this._bufferService.removeBuffer(0, mediaTime - bufferBehind);
              case 17:
              case "end":
                return _context15.stop();
            }
        }, _callee15, this);
      }));
      function _onCheckQuotaExceeded() {
        return _onCheckQuotaExceeded2.apply(this, arguments);
      }
      return _onCheckQuotaExceeded;
    }()
  }, {
    key: "_checkStreamTrackChange",
    value: function _checkStreamTrackChange(time) {
      var changedSeg = this._playlist.checkSegmentTrackChange(time, this._bufferService.nbSb);
      if (!changedSeg)
        return;
      this.switchURL(this.config.url, changedSeg.start + 0.2);
    }
  }, {
    key: "_clear",
    value: function() {
      var _clear2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee16() {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1)
            switch (_context16.prev = _context16.next) {
              case 0:
                clearTimeout(this._disconnectTimer);
                this._stopTick();
                _context16.next = 4;
                return Promise.all([this._segmentLoader.cancel(), this._manifestLoader.stopPoll()]);
              case 4:
                this._segmentProcessing = false;
              case 5:
              case "end":
                return _context16.stop();
            }
        }, _callee16, this);
      }));
      function _clear() {
        return _clear2.apply(this, arguments);
      }
      return _clear;
    }()
  }, {
    key: "_reset",
    value: function() {
      var _reset2 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee17() {
        var _this$_seiService3;
        var reuseMse, _args17 = arguments;
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1)
            switch (_context17.prev = _context17.next) {
              case 0:
                reuseMse = _args17.length > 0 && _args17[0] !== void 0 ? _args17[0] : false;
                this._reloadOnPlay = false;
                this._prevSegSn = null;
                this._prevSegCc = null;
                this._switchUrlOpts = null;
                this._playlist.reset();
                this._segmentLoader.reset();
                (_this$_seiService3 = this._seiService) === null || _this$_seiService3 === void 0 ? void 0 : _this$_seiService3.reset();
                this._stats.reset();
                _context17.next = 11;
                return this._clear();
              case 11:
                return _context17.abrupt("return", this._bufferService.reset(reuseMse));
              case 12:
              case "end":
                return _context17.stop();
            }
        }, _callee17, this);
      }));
      function _reset() {
        return _reset2.apply(this, arguments);
      }
      return _reset;
    }()
  }, {
    key: "_end",
    value: function _end() {
      this._clear();
      this._bufferService.endOfStream();
      if (this.media.readyState <= 2 || this.media.buffered.length > 1) {
        this._startTick();
      }
    }
  }, {
    key: "_stopTick",
    value: function _stopTick() {
      if (this._tickTimer) {
        clearTimeout(this._tickTimer);
      }
      this._tickTimer = null;
    }
  }, {
    key: "_startTick",
    value: function _startTick() {
      this._stopTick();
      this._tickTimer = setTimeout(this._tick, this._tickInterval);
    }
  }, {
    key: "_emitError",
    value: function _emitError(error) {
      var _error$originError;
      var endOfStream = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (((_error$originError = error.originError) === null || _error$originError === void 0 ? void 0 : _error$originError.fatal) === false) {
        logger.warn(error);
      } else {
        var _this$media2, _this$media3, _this$_seiService4;
        logger.table(error);
        logger.error(error);
        logger.error((_this$media2 = this.media) === null || _this$media2 === void 0 ? void 0 : _this$media2.error);
        if ((_this$media3 = this.media) !== null && _this$media3 !== void 0 && _this$media3.readyState) {
          this.media.pause();
        }
        this._stopTick();
        if (this._urlSwitching) {
          this._urlSwitching = false;
          this.emit(Event.SWITCH_URL_FAILED, error);
        }
        this.emit(Event.ERROR, error);
        if (endOfStream)
          this._end();
        (_this$_seiService4 = this._seiService) === null || _this$_seiService4 === void 0 ? void 0 : _this$_seiService4.reset();
      }
      return error;
    }
  }, {
    key: "_getSeamlessSwitchPoint",
    value: function _getSeamlessSwitchPoint() {
      var media = this.media;
      var nextLoadPoint = media.currentTime;
      if (!media.paused) {
        var _this$_stats;
        var segIdx = this._playlist.findSegmentIndexByTime(media.currentTime);
        var curSeg = this._playlist.getSegmentByIndex(segIdx);
        var latestKbps = (_this$_stats = this._stats) === null || _this$_stats === void 0 ? void 0 : _this$_stats.getStats().downloadSpeed;
        if (latestKbps && curSeg) {
          var delay = curSeg.duration * this._playlist.currentStream.bitrate / latestKbps + 1;
          nextLoadPoint += delay;
        } else {
          nextLoadPoint += 5;
        }
      }
      return nextLoadPoint;
    }
  }, {
    key: "_tryEos",
    value: function _tryEos() {
      var _this$_bufferService3, _this$_bufferService4;
      var media = this.media;
      var _this$_playlist = this._playlist, nextSegment = _this$_playlist.nextSegment, lastSegment = _this$_playlist.lastSegment;
      var eosAllowed = !nextSegment && media.readyState && media.duration > 0 && ((_this$_bufferService3 = this._bufferService) === null || _this$_bufferService3 === void 0 ? void 0 : _this$_bufferService3.msIsOpened) && !((_this$_bufferService4 = this._bufferService) !== null && _this$_bufferService4 !== void 0 && _this$_bufferService4.msHasOpTasks);
      if (!eosAllowed) {
        return;
      }
      var bInfo = this.bufferInfo();
      if (media.paused && !media.currentTime) {
        bInfo = this.bufferInfo(bInfo.nextStart || 0.5);
      }
      var bufferThroughout = Math.abs(bInfo.end - media.duration) < 0.1 || !this.isLive && lastSegment && bInfo.end >= lastSegment.start + lastSegment.duration;
      if (bufferThroughout) {
        this._bufferService.endOfStream();
      }
    }
  }], [{
    key: "isSupported",
    value: function isSupported(mediaType) {
      if (!mediaType || mediaType === "video" || mediaType === "audio") {
        return MSE.isSupported();
      }
      return typeof WebAssembly !== "undefined";
    }
  }, {
    key: "enableLogger",
    value: function enableLogger() {
      Logger.enable();
      Logger$1.enable();
    }
  }, {
    key: "disableLogger",
    value: function disableLogger() {
      Logger.disable();
      Logger$1.disable();
    }
  }]);
  return Hls2;
}(EventEmitter);
_defineProperty(Hls, "version", "3.0.17");
try {
  if (localStorage.getItem("xgd")) {
    Hls.enableLogger();
  } else {
    Hls.disableLogger();
  }
} catch (error) {
}
export { Hls };
