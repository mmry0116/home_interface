import util from "./index.js";
var isSupport = _isLocalStorageUsable();
var openLog = checkOpenLog();
checkTestOpenLog();
function probeSupport() {
  try {
    return typeof localStorage !== "undefined" && "setItem" in window.localStorage && !!window.localStorage.setItem;
  } catch (e) {
    return false;
  }
}
function checkIfLocalStorageThrows() {
  var localStorageTestKey = "_localstorage_support_test";
  try {
    window.localStorage.setItem(localStorageTestKey, true);
    window.localStorage.removeItem(localStorageTestKey);
    return false;
  } catch (e) {
    return true;
  }
}
function checkOpenLog() {
  if (isSupport) {
    try {
      return !!window.localStorage.getItem("playerlog");
    } catch (e) {
      return false;
    }
  }
  return false;
}
function _isLocalStorageUsable() {
  return probeSupport() && !checkIfLocalStorageThrows();
}
function log(message) {
  var _console;
  for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    optionalParams[_key - 1] = arguments[_key];
  }
  openLog && console.log && (_console = console).log.apply(_console, ["[logger]", util.nowTime(), message].concat(optionalParams));
}
function checkTestOpenLog() {
  if (isSupport) {
    try {
      return !!window.localStorage.getItem("playertestlog");
    } catch (e) {
      return false;
    }
  }
  return false;
}
export { checkOpenLog, checkTestOpenLog, log, openLog };
