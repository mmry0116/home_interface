import { createClass as _createClass, classCallCheck as _classCallCheck } from "./_virtual/_rollupPluginBabelHelpers.js";
import version from "./version.js";
import { ERR_CODE, ERR } from "xgplayer-streaming-shared";
var ERROR_CODES = {
  416: ERR_CODE[ERR.NETWROK_RANGE_NOT_SATISFIABLE],
  403: ERR_CODE[ERR.NETWORK_FORBIDDEN],
  404: ERR_CODE[ERR.NETWORK_NOTFOUND],
  timeout: ERR_CODE[ERR.NETWORK_TIMEOUT],
  "4xx": "".concat(ERR_CODE[ERR.NETWORK], "4XX"),
  "5xx": "".concat(ERR_CODE[ERR.NETWORK], "5XX"),
  networkError: ERR_CODE[ERR.NETWORK],
  contentError: "".concat(ERR_CODE[ERR.NETWORK], "contentError"),
  mse: ERR_CODE[ERR.MEDIA][ERR.SUB_TYPES.MSE_OTHER],
  mseOpen: ERR_CODE[ERR.MEDIA][ERR.SUB_TYPES.MSE_ADD_SB],
  mseAppend: ERR_CODE[ERR.MEDIA][ERR.SUB_TYPES.MSE_APPEND_BUFFER],
  mse_hijack: ERR_CODE[ERR.MEDIA][ERR.SUB_TYPES.MSE_HIJACK],
  eme_hijack: ERR_CODE[ERR.MEDIA][ERR.SUB_TYPES.EME_HIJACK],
  metaError: ERR_CODE[ERR.DEMUX][ERR.SUB_TYPES.MP4],
  muxError: ERR_CODE[ERR.REMUX][ERR.SUB_TYPES.FMP4],
  other: ERR_CODE[ERR.OTHER],
  waitTimeout: ERR_CODE[ERR.RUNTIME][ERR.SUB_TYPES.BUFFERBREAK_ERROR],
  waitTimeoutWithHidden: ERR_CODE[ERR.RUNTIME][ERR.SUB_TYPES.WAITING_TIMEOUT_ERROR],
  drm: ERR_CODE[ERR.DRM][ERR.SUB_TYPES.LICENSE]
};
var ERROR_TYPES = ERR;
function getErrorCodeByHttpCode(httpCode) {
  return ERROR_CODES[httpCode] || httpCode;
}
var NetWorkError = /* @__PURE__ */ _createClass(function NetWorkError2(type, httpCode, context) {
  _classCallCheck(this, NetWorkError2);
  var rangeStart = 0;
  var rangeEnd = 0;
  if (context && context.range && context.range.length > 1) {
    rangeStart = context.range[0];
    rangeEnd = context.range[1];
  }
  var _errCode = getErrorCodeByHttpCode(httpCode);
  return {
    errorCode: _errCode,
    errorType: type,
    errorMessage: (context === null || context === void 0 ? void 0 : context.httpText) || (context === null || context === void 0 ? void 0 : context.message),
    url: context === null || context === void 0 ? void 0 : context.url,
    httpCode,
    version,
    rangeStart,
    rangeEnd,
    ext: context,
    mediaError: {
      code: _errCode,
      message: (context === null || context === void 0 ? void 0 : context.httpText) || (context === null || context === void 0 ? void 0 : context.message)
    }
  };
});
var ParserError = /* @__PURE__ */ _createClass(function ParserError2(type, errorCode, ext) {
  _classCallCheck(this, ParserError2);
  return {
    errorCode,
    errorType: type,
    version,
    errorMessage: ext.msg,
    ext,
    mediaError: {
      code: errorCode,
      message: ext.msg
    }
  };
});
export { ERROR_CODES, ERROR_TYPES, NetWorkError, ParserError, getErrorCodeByHttpCode };
