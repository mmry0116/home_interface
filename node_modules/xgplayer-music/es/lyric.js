import { createClass as _createClass, classCallCheck as _classCallCheck } from "./_virtual/_rollupPluginBabelHelpers.js";
import { Util } from "xgplayer";
var LyricTime = /* @__PURE__ */ _createClass(function LyricTime2(timeTxt) {
  _classCallCheck(this, LyricTime2);
  this.regRule = /(\d{2}(?=:)):(\d{2}(?=\.))\.(\d{2,3})/g;
  if (this.regRule.test(timeTxt)) {
    this.time = RegExp.$1 * 60 + RegExp.$2 * 1 + ("0." + RegExp.$3) * 1;
  } else {
    this.time = -1;
  }
});
var Lyric = /* @__PURE__ */ function() {
  function Lyric2(txts, dom) {
    var _this = this;
    _classCallCheck(this, Lyric2);
    this.rawTxts = txts;
    this.txts = txts.map(function(item) {
      return item.replace(/^[\r\n]|[\r\n]$/g, "").match(/(\[.*\])[^[]+/g);
    });
    this.isDynamics = txts.map(function(item, idx) {
      return [].concat(item.match(/\[\d{2}:\d{2}\.\d{2,3}\]/g)).length === _this.txts[idx].length && _this.txts[idx].length === _this.txts[0].length && _this.txts[idx].length > 1;
    });
    this.isDynamic = this.isDynamics.some(function(item) {
      return item;
    });
    this.__ainimateInterval__ = 0;
    this.__offset__ = 0;
    this.__offsetScale__ = 0.5;
    this.dom = dom;
    this.lists = [];
    this.isDynamics.map(function(item, idx) {
      if (item) {
        _this.lists.push(_this.txts[idx].map(function(txt, index) {
          var reg = /(\[[\d:\S]+\])([^[]+)/g.test(txt);
          var time = RegExp.$1;
          var lyric = RegExp.$2;
          return {
            time: reg ? new LyricTime(time).time : -1,
            lyric,
            idx: index
          };
        }));
      }
    });
    this.list = this.lists.reduce(function(pre, cur) {
      return pre.map(function(item, idx) {
        return {
          time: item.time,
          lyric: item.lyric === "\n" ? "".concat(item.lyric).concat(cur[idx].lyric) : "".concat(item.lyric, "<br/>").concat(cur[idx].lyric),
          idx
        };
      });
    });
    this.line = 0;
  }
  _createClass(Lyric2, [{
    key: "interval",
    get: function get() {
      return this.__ainimateInterval__;
    },
    set: function set(val) {
      this.__ainimateInterval__ = val;
    }
  }, {
    key: "offset",
    get: function get() {
      return this.__offset__;
    },
    set: function set(val) {
      this.__offset__ = val;
    }
  }, {
    key: "offsetScale",
    get: function get() {
      return this.__offsetScale__;
    },
    set: function set(val) {
      this.__offsetScale__ = val;
    }
  }, {
    key: "adjust",
    value: function adjust() {
      var list = this.list;
      for (var i = 0, j, k, len = list.length; i < len; i++) {
        for (j = i + 1; j < len; j++) {
          if (list[j].time > list[i].time) {
            break;
          }
        }
        if (j < len) {
          var sep = (list[j].time - list[i].time) / (j - i);
          for (k = i + 1; k < j; k++) {
            list[k].time = list[k - 1].time + sep;
          }
        }
      }
    }
  }, {
    key: "find",
    value: function find(curTime) {
      var list = this.list;
      var interval = this.__ainimateInterval__;
      var offset = this.__offset__;
      curTime = curTime + offset > 0 ? curTime + offset : 0;
      return list.filter(function(_ref, idx) {
        var time = _ref.time;
        var idxy = idx + 1;
        return curTime >= time && (list[idxy] && curTime * 1 + interval * 1 <= list[idxy].time || idxy >= list.length);
      });
    }
  }, {
    key: "bind",
    value: function bind(player) {
      var _this2 = this;
      var self = this;
      this.__player__ = player;
      if (self.isDynamic) {
        self.__handle__ = function() {
          var f = _this2.find(player.currentTime)[0];
          if (f && f.idx !== _this2.line) {
            _this2.line = f.idx;
            player.emit("lyricUpdate", f);
          }
        }.bind(self, player);
        player.on("timeupdate", self.__handle__);
        self.__startHandle__ = function() {
          player.emit("lyricUpdate", self.list[0]);
        }.bind(self, player);
        player.once("playing", self.__startHandle__);
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "unbind",
    value: function unbind(player) {
      delete this.__player__;
      if (this.__handle__) {
        player.off("lyricUpdate", this.__handle__);
        delete this.__handle__;
      }
    }
  }, {
    key: "show",
    value: function show() {
      var _this3 = this;
      var dom = this.dom;
      var lyrbicTxts = [];
      var self = this;
      var ev = ["click", "touchstart"];
      if (dom && dom.nodeType === 1) {
        var lrcWrap = Util.createDom("div", "<div></div>", {}, "xgplayer-lrcWrap");
        dom.appendChild(lrcWrap);
        this.list.forEach(function(item) {
          lyrbicTxts.push('<xg-lyric-item class="xgplayer-lyric-item" data-idx="'.concat(item.idx, '">').concat(item.lyric.replace(/[\r\n]/g, ""), "</xg-lyric-item>"));
        });
        lrcWrap.innerHTML = lyrbicTxts.join("");
        var lrcForward = Util.createDom("xg-lrcForward", "<div></div>", {}, "xgplayer-lrcForward");
        dom.appendChild(lrcForward);
        ev.forEach(function(item) {
          lrcForward.addEventListener(item, function(e) {
            e.preventDefault();
            e.stopPropagation();
            self.offset -= self.offsetScale;
            console.log("lyric go forward ".concat(self.offsetScale, "s"));
          }, false);
        });
        var lrcBack = Util.createDom("xg-lrcBack", "<div></div>", {}, "xgplayer-lrcBack");
        dom.appendChild(lrcBack);
        ev.forEach(function(item) {
          lrcBack.addEventListener(item, function(e) {
            e.preventDefault();
            e.stopPropagation();
            self.offset += self.offsetScale;
            console.log("lyric go back ".concat(self.offsetScale, "s"));
          }, false);
        });
        this.__updateHandle__ = function(item) {
          var domWrap = _this3.dom.querySelector(".xgplayer-lrcWrap");
          var activeDom = domWrap.querySelector(".xgplayer-lyric-item-active");
          var offsetHeight = domWrap.offsetHeight;
          var activeTop;
          if (activeDom) {
            activeDom.className = "xgplayer-lyric-item";
          }
          activeDom = domWrap.querySelector('.xgplayer-lyric-item[data-idx="'.concat(item.idx, '"]'));
          if (activeDom) {
            activeDom.className = "xgplayer-lyric-item xgplayer-lyric-item-active";
            activeTop = activeDom.getBoundingClientRect().top - domWrap.getBoundingClientRect().top + domWrap.scrollTop - offsetHeight / 2;
            if (activeTop) {
              domWrap.scrollTop = activeTop;
            }
          }
        };
        this.__player__.on("lyricUpdate", this.__updateHandle__);
      } else {
        this.__player__.emit("error", "lyric container can not be empty");
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      this.__updateHandle__.off("lyricUpdate", this.__updateHandle__);
    }
  }]);
  return Lyric2;
}();
export { LyricTime, Lyric as default };
