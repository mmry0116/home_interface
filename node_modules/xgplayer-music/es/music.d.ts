export default class Music extends BasePlugin {
    /**
     * @type { IMusicConfig }
     */
    static get defaultConfig(): IMusicConfig;
    /**
     * @desc
     * @type {Array<string>}}
     */
    static get ModeType(): string[];
    halfPass: boolean;
    list: any;
    nextIndex: any;
    prevIndex: any;
    history: any[];
    disable: boolean;
    _curInfo: {
        title: any;
        vid: any;
        poster: any;
        src: any;
    };
    index: any;
    _onEnded: () => void;
    _onDurationChange: () => void;
    _onTimeUpdate: () => void;
    _nextCompute(): void;
    _prevCompute(): void;
    _emitChange(): void;
    _initABCycle(abCycle: any, player: any): void;
    /**
     * @desc Get a random one from the playlist
     * @returns { IMusicListItem | null }
     */
    random(): IMusicListItem | null;
    /**
     * @desc play next item in playlist
     * @returns
     */
    next(): void;
    /**
     * @desc play previous item in playlist
     * @returns
     */
    prev(): void;
    /**
     * @desc fast forward play,
     */
    forward(): void;
    /**
     * @desc rewind playback
     */
    backward(): void;
    /**
     * @desc Add list item to the list
     * @param { IMusicListItem } meta
     */
    add(meta: IMusicListItem): void;
    /**
     * @desc Remove list item from the list
     * @param { string } vid
     */
    remove(vid: string): void;
    /**
     * @desc set abCycle config
     * @param { number | IABCycle } start
     * @param { number } [end]
     * @param { boolean } [loop]
     * @param {{ [propName: string]: any }} [ext]
     */
    setAbCycle(start: number | IABCycle, end?: number, loop?: boolean, ext?: {
        [propName: string]: any;
    }): void;
    /**
     * @desc remove abCycle config
     */
    removeAbCycle(): void;
    /**
     * @desc update the playList
     * @param { Array<IMusicListItem> } list
     */
    updateList(list?: Array<IMusicListItem>): void;
    /**
     * @desc set play index
     * @param { number } index
     */
    setIndex(index?: number): void;
    change(): void;
    /**
     * 检查当前播放音频是否有本地缓存
     * @param { string } url
     * @param { string | number } offlineVid
     * @returns
     */
    checkOffline(url: string, offlineVid: string | number): Promise<any>;
    confirmOrder(): void;
    preload(index: any): void;
    set timeScale(arg: number);
    /**
     * @type { number }
     * @description forward or backward time scale
     */
    get timeScale(): number;
    set mode(arg: "order" | "loop" | "sloop" | "random");
    /**
     * @type { 'order' | 'sloop' | 'loop' | 'random' }
     * @description  set current play mode
     */
    get mode(): "order" | "loop" | "sloop" | "random";
}
export type IMusicListItem = {
    src: string;
    vid: string | number;
    poster?: string;
    title?: string;
};
export type IABCycle = {
    [propName: string]: any;
    start: number;
    end: number;
    loop?: boolean;
};
export type IMusicConfig = {
    [propName: string]: any;
    offline?: boolean;
    abCycle?: {
        IABCycle;
    } | null;
    timeScale?: number;
    mode?: 'order' | 'sloop' | 'loop' | 'random';
    list?: Array<IMusicListItem>;
};
import { BasePlugin } from "xgplayer";
