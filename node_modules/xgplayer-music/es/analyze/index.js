import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty } from "../_virtual/_rollupPluginBabelHelpers.js";
import render, { MODES } from "./render.js";
export { MODES } from "./render.js";
import { getGradient } from "./helper.js";
var Analyze = /* @__PURE__ */ function() {
  function Analyze2(player, canvas) {
    var _this = this;
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    _classCallCheck(this, Analyze2);
    _defineProperty(this, "start", function() {
      if (_this.reqId) {
        return;
      }
      _this._renderFrame();
    });
    _defineProperty(this, "stop", function() {
      cancelAnimationFrame(_this.reqId);
      _this.reqId = null;
    });
    _defineProperty(this, "_onDestroy", function() {
      _this._audioCtx.close();
    });
    _defineProperty(this, "_onoVolumechange", function() {
      console.log("onoVolumechange");
      _this.gainNode.gain.setValueAtTime(_this.player.volume, _this.player.currentTime);
    });
    _defineProperty(this, "_renderFrame", function() {
      if (_this.reqId) {
        cancelAnimationFrame(_this.reqId);
      }
      _this.reqId = requestAnimationFrame(_this._renderFrame);
      _this.frameCount++;
      _this.mode === "lightning" ? _this.analyser.getByteTimeDomainData(_this.dataArray) : _this.analyser.getByteFrequencyData(_this.dataArray);
      render.call(_this, _this.dataArray, _this.canvas, _this.options, _this.frameCount);
    });
    this.canvas = canvas;
    var _this$canvas$getBound = this.canvas.getBoundingClientRect(), width = _this$canvas$getBound.width, height = _this$canvas$getBound.height;
    this.canvas.width = width * 2;
    this.canvas.height = height * 2;
    this.player = player;
    this.options = Analyze2.defaultConfig;
    Object.keys(options).map(function(key) {
      _this.options[key] = options[key];
    });
    if (!Analyze2.AudioCtx) {
      return;
    }
    if (player.audioCtx) {
      this._audioCtx = player.audioCtx;
    } else {
      this._audioCtx = new Analyze2.AudioCtx();
    }
    this.analyser = this._audioCtx.createAnalyser();
    var gainNode = this._audioCtx.createGain();
    gainNode.gain.setValueAtTime(player.volume, player.currentTime);
    this.gainNode = gainNode;
    this.source = this._audioCtx.createMediaElementSource(player.video);
    this.ctx = canvas.getContext("2d");
    this.source.connect(this.analyser);
    this.analyser.connect(gainNode);
    this.fftSize = this.options.fftSize;
    this.frameCount = 0;
    if (this.options.isGradient) {
      this.options.linear = getGradient(this.ctx, canvas.width, this.options.colors);
    }
    gainNode.connect(this._audioCtx.destination);
    this._initPlayerEvents();
  }
  _createClass(Analyze2, [{
    key: "_initPlayerEvents",
    value: function _initPlayerEvents() {
      var _this2 = this;
      ["play", "playing", "seeked"].forEach(function(name) {
        _this2.player.on(name, _this2.start);
      });
      this.player.on("volumechange", this._onoVolumechange);
      this.player.on("destroy", this._onDestroy);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this3 = this;
      this.stop();
      ["play", "playing", "seeked"].forEach(function(name) {
        _this3.player.off(name, _this3.start);
      });
      this.player.off("volumechange", this._onoVolumechange);
      this.player.off("destroy", this._onDestroy);
      this._audioCtx.close();
    }
  }, {
    key: "mode",
    get: function get() {
      return this.options.mode;
    },
    set: function set(val) {
      this.options.mode = val;
    }
  }, {
    key: "fftSize",
    get: function get() {
      return this.analyser.frequencyBinCount * 2;
    },
    set: function set(val) {
      this.analyser.fftSize = val;
      var bufferLen = this.analyser.frequencyBinCount;
      this.dataArray = new Uint8Array(bufferLen);
    }
  }], [{
    key: "defaultConfig",
    get: function get() {
      return {
        fftSize: 16384,
        count: 1024,
        mode: "bars",
        colors: ["#ff8177", "#cf556c", "#f99185", "#b12a5b"],
        stroke: 2,
        bgColor: "#000",
        isGradient: true,
        linear: null
      };
    }
  }, {
    key: "MODES",
    get: function get() {
      return MODES;
    }
  }, {
    key: "AudioCtx",
    get: function get() {
      return window.AudioContext || window.webkitAudioContext;
    }
  }]);
  return Analyze2;
}();
export { Analyze as default };
